/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cmc.gateway.domain.model.impl;

import com.cmc.gateway.domain.model.CommandAction;
import com.cmc.gateway.domain.model.CommandActionModel;
import com.cmc.gateway.domain.model.CommandActionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CommandAction service. Represents a row in the &quot;GW_CommandAction&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cmc.gateway.domain.model.CommandActionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommandActionImpl}.
 * </p>
 *
 * @author Richard Nguyen
 * @see CommandActionImpl
 * @see com.cmc.gateway.domain.model.CommandAction
 * @see com.cmc.gateway.domain.model.CommandActionModel
 * @generated
 */
@JSON(strict = true)
public class CommandActionModelImpl extends BaseModelImpl<CommandAction>
	implements CommandActionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a command action model instance should use the {@link com.cmc.gateway.domain.model.CommandAction} interface instead.
	 */
	public static final String TABLE_NAME = "GW_CommandAction";
	public static final Object[][] TABLE_COLUMNS = {
			{ "actionId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "commandId", Types.BIGINT },
			{ "productId", Types.BIGINT },
			{ "actionType", Types.VARCHAR },
			{ "subscriberType", Types.INTEGER },
			{ "actionName", Types.VARCHAR },
			{ "nextActionType", Types.VARCHAR },
			{ "nextCommandId", Types.BIGINT },
			{ "processClass", Types.VARCHAR },
			{ "processMethod", Types.VARCHAR },
			{ "properties", Types.VARCHAR },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GW_CommandAction (actionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,commandId LONG,productId LONG,actionType VARCHAR(75) null,subscriberType INTEGER,actionName VARCHAR(75) null,nextActionType VARCHAR(75) null,nextCommandId LONG,processClass VARCHAR(75) null,processMethod VARCHAR(75) null,properties STRING null,description STRING null)";
	public static final String TABLE_SQL_DROP = "drop table GW_CommandAction";
	public static final String ORDER_BY_JPQL = " ORDER BY commandAction.actionName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GW_CommandAction.actionName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cmc.gateway.domain.model.CommandAction"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cmc.gateway.domain.model.CommandAction"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cmc.gateway.domain.model.CommandAction"),
			true);
	public static long ACTIONNAME_COLUMN_BITMASK = 1L;
	public static long ACTIONTYPE_COLUMN_BITMASK = 2L;
	public static long COMMANDID_COLUMN_BITMASK = 4L;
	public static long NEXTCOMMANDID_COLUMN_BITMASK = 8L;
	public static long PRODUCTID_COLUMN_BITMASK = 16L;
	public static long SUBSCRIBERTYPE_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CommandAction toModel(CommandActionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CommandAction model = new CommandActionImpl();

		model.setActionId(soapModel.getActionId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCommandId(soapModel.getCommandId());
		model.setProductId(soapModel.getProductId());
		model.setActionType(soapModel.getActionType());
		model.setSubscriberType(soapModel.getSubscriberType());
		model.setActionName(soapModel.getActionName());
		model.setNextActionType(soapModel.getNextActionType());
		model.setNextCommandId(soapModel.getNextCommandId());
		model.setProcessClass(soapModel.getProcessClass());
		model.setProcessMethod(soapModel.getProcessMethod());
		model.setProperties(soapModel.getProperties());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CommandAction> toModels(CommandActionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CommandAction> models = new ArrayList<CommandAction>(soapModels.length);

		for (CommandActionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cmc.gateway.domain.model.CommandAction"));

	public CommandActionModelImpl() {
	}

	public long getPrimaryKey() {
		return _actionId;
	}

	public void setPrimaryKey(long primaryKey) {
		setActionId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_actionId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return CommandAction.class;
	}

	public String getModelClassName() {
		return CommandAction.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("actionId", getActionId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("commandId", getCommandId());
		attributes.put("productId", getProductId());
		attributes.put("actionType", getActionType());
		attributes.put("subscriberType", getSubscriberType());
		attributes.put("actionName", getActionName());
		attributes.put("nextActionType", getNextActionType());
		attributes.put("nextCommandId", getNextCommandId());
		attributes.put("processClass", getProcessClass());
		attributes.put("processMethod", getProcessMethod());
		attributes.put("properties", getProperties());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long actionId = (Long)attributes.get("actionId");

		if (actionId != null) {
			setActionId(actionId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long commandId = (Long)attributes.get("commandId");

		if (commandId != null) {
			setCommandId(commandId);
		}

		Long productId = (Long)attributes.get("productId");

		if (productId != null) {
			setProductId(productId);
		}

		String actionType = (String)attributes.get("actionType");

		if (actionType != null) {
			setActionType(actionType);
		}

		Integer subscriberType = (Integer)attributes.get("subscriberType");

		if (subscriberType != null) {
			setSubscriberType(subscriberType);
		}

		String actionName = (String)attributes.get("actionName");

		if (actionName != null) {
			setActionName(actionName);
		}

		String nextActionType = (String)attributes.get("nextActionType");

		if (nextActionType != null) {
			setNextActionType(nextActionType);
		}

		Long nextCommandId = (Long)attributes.get("nextCommandId");

		if (nextCommandId != null) {
			setNextCommandId(nextCommandId);
		}

		String processClass = (String)attributes.get("processClass");

		if (processClass != null) {
			setProcessClass(processClass);
		}

		String processMethod = (String)attributes.get("processMethod");

		if (processMethod != null) {
			setProcessMethod(processMethod);
		}

		String properties = (String)attributes.get("properties");

		if (properties != null) {
			setProperties(properties);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	public long getActionId() {
		return _actionId;
	}

	public void setActionId(long actionId) {
		_actionId = actionId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public long getCommandId() {
		return _commandId;
	}

	public void setCommandId(long commandId) {
		_columnBitmask |= COMMANDID_COLUMN_BITMASK;

		if (!_setOriginalCommandId) {
			_setOriginalCommandId = true;

			_originalCommandId = _commandId;
		}

		_commandId = commandId;
	}

	public long getOriginalCommandId() {
		return _originalCommandId;
	}

	@JSON
	public long getProductId() {
		return _productId;
	}

	public void setProductId(long productId) {
		_columnBitmask |= PRODUCTID_COLUMN_BITMASK;

		if (!_setOriginalProductId) {
			_setOriginalProductId = true;

			_originalProductId = _productId;
		}

		_productId = productId;
	}

	public long getOriginalProductId() {
		return _originalProductId;
	}

	@JSON
	public String getActionType() {
		if (_actionType == null) {
			return StringPool.BLANK;
		}
		else {
			return _actionType;
		}
	}

	public void setActionType(String actionType) {
		_columnBitmask |= ACTIONTYPE_COLUMN_BITMASK;

		if (_originalActionType == null) {
			_originalActionType = _actionType;
		}

		_actionType = actionType;
	}

	public String getOriginalActionType() {
		return GetterUtil.getString(_originalActionType);
	}

	@JSON
	public int getSubscriberType() {
		return _subscriberType;
	}

	public void setSubscriberType(int subscriberType) {
		_columnBitmask |= SUBSCRIBERTYPE_COLUMN_BITMASK;

		if (!_setOriginalSubscriberType) {
			_setOriginalSubscriberType = true;

			_originalSubscriberType = _subscriberType;
		}

		_subscriberType = subscriberType;
	}

	public int getOriginalSubscriberType() {
		return _originalSubscriberType;
	}

	@JSON
	public String getActionName() {
		if (_actionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _actionName;
		}
	}

	public void setActionName(String actionName) {
		_columnBitmask = -1L;

		if (_originalActionName == null) {
			_originalActionName = _actionName;
		}

		_actionName = actionName;
	}

	public String getOriginalActionName() {
		return GetterUtil.getString(_originalActionName);
	}

	@JSON
	public String getNextActionType() {
		if (_nextActionType == null) {
			return StringPool.BLANK;
		}
		else {
			return _nextActionType;
		}
	}

	public void setNextActionType(String nextActionType) {
		_nextActionType = nextActionType;
	}

	@JSON
	public long getNextCommandId() {
		return _nextCommandId;
	}

	public void setNextCommandId(long nextCommandId) {
		_columnBitmask |= NEXTCOMMANDID_COLUMN_BITMASK;

		if (!_setOriginalNextCommandId) {
			_setOriginalNextCommandId = true;

			_originalNextCommandId = _nextCommandId;
		}

		_nextCommandId = nextCommandId;
	}

	public long getOriginalNextCommandId() {
		return _originalNextCommandId;
	}

	@JSON
	public String getProcessClass() {
		if (_processClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _processClass;
		}
	}

	public void setProcessClass(String processClass) {
		_processClass = processClass;
	}

	@JSON
	public String getProcessMethod() {
		if (_processMethod == null) {
			return StringPool.BLANK;
		}
		else {
			return _processMethod;
		}
	}

	public void setProcessMethod(String processMethod) {
		_processMethod = processMethod;
	}

	@JSON
	public String getProperties() {
		if (_properties == null) {
			return StringPool.BLANK;
		}
		else {
			return _properties;
		}
	}

	public void setProperties(String properties) {
		_properties = properties;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CommandAction.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CommandAction toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (CommandAction)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		CommandActionImpl commandActionImpl = new CommandActionImpl();

		commandActionImpl.setActionId(getActionId());
		commandActionImpl.setGroupId(getGroupId());
		commandActionImpl.setCompanyId(getCompanyId());
		commandActionImpl.setUserId(getUserId());
		commandActionImpl.setCreateDate(getCreateDate());
		commandActionImpl.setModifiedDate(getModifiedDate());
		commandActionImpl.setCommandId(getCommandId());
		commandActionImpl.setProductId(getProductId());
		commandActionImpl.setActionType(getActionType());
		commandActionImpl.setSubscriberType(getSubscriberType());
		commandActionImpl.setActionName(getActionName());
		commandActionImpl.setNextActionType(getNextActionType());
		commandActionImpl.setNextCommandId(getNextCommandId());
		commandActionImpl.setProcessClass(getProcessClass());
		commandActionImpl.setProcessMethod(getProcessMethod());
		commandActionImpl.setProperties(getProperties());
		commandActionImpl.setDescription(getDescription());

		commandActionImpl.resetOriginalValues();

		return commandActionImpl;
	}

	public int compareTo(CommandAction commandAction) {
		int value = 0;

		value = getActionName().compareTo(commandAction.getActionName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		CommandAction commandAction = null;

		try {
			commandAction = (CommandAction)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = commandAction.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CommandActionModelImpl commandActionModelImpl = this;

		commandActionModelImpl._originalCommandId = commandActionModelImpl._commandId;

		commandActionModelImpl._setOriginalCommandId = false;

		commandActionModelImpl._originalProductId = commandActionModelImpl._productId;

		commandActionModelImpl._setOriginalProductId = false;

		commandActionModelImpl._originalActionType = commandActionModelImpl._actionType;

		commandActionModelImpl._originalSubscriberType = commandActionModelImpl._subscriberType;

		commandActionModelImpl._setOriginalSubscriberType = false;

		commandActionModelImpl._originalActionName = commandActionModelImpl._actionName;

		commandActionModelImpl._originalNextCommandId = commandActionModelImpl._nextCommandId;

		commandActionModelImpl._setOriginalNextCommandId = false;

		commandActionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CommandAction> toCacheModel() {
		CommandActionCacheModel commandActionCacheModel = new CommandActionCacheModel();

		commandActionCacheModel.actionId = getActionId();

		commandActionCacheModel.groupId = getGroupId();

		commandActionCacheModel.companyId = getCompanyId();

		commandActionCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			commandActionCacheModel.createDate = createDate.getTime();
		}
		else {
			commandActionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			commandActionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			commandActionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		commandActionCacheModel.commandId = getCommandId();

		commandActionCacheModel.productId = getProductId();

		commandActionCacheModel.actionType = getActionType();

		String actionType = commandActionCacheModel.actionType;

		if ((actionType != null) && (actionType.length() == 0)) {
			commandActionCacheModel.actionType = null;
		}

		commandActionCacheModel.subscriberType = getSubscriberType();

		commandActionCacheModel.actionName = getActionName();

		String actionName = commandActionCacheModel.actionName;

		if ((actionName != null) && (actionName.length() == 0)) {
			commandActionCacheModel.actionName = null;
		}

		commandActionCacheModel.nextActionType = getNextActionType();

		String nextActionType = commandActionCacheModel.nextActionType;

		if ((nextActionType != null) && (nextActionType.length() == 0)) {
			commandActionCacheModel.nextActionType = null;
		}

		commandActionCacheModel.nextCommandId = getNextCommandId();

		commandActionCacheModel.processClass = getProcessClass();

		String processClass = commandActionCacheModel.processClass;

		if ((processClass != null) && (processClass.length() == 0)) {
			commandActionCacheModel.processClass = null;
		}

		commandActionCacheModel.processMethod = getProcessMethod();

		String processMethod = commandActionCacheModel.processMethod;

		if ((processMethod != null) && (processMethod.length() == 0)) {
			commandActionCacheModel.processMethod = null;
		}

		commandActionCacheModel.properties = getProperties();

		String properties = commandActionCacheModel.properties;

		if ((properties != null) && (properties.length() == 0)) {
			commandActionCacheModel.properties = null;
		}

		commandActionCacheModel.description = getDescription();

		String description = commandActionCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			commandActionCacheModel.description = null;
		}

		return commandActionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{actionId=");
		sb.append(getActionId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", commandId=");
		sb.append(getCommandId());
		sb.append(", productId=");
		sb.append(getProductId());
		sb.append(", actionType=");
		sb.append(getActionType());
		sb.append(", subscriberType=");
		sb.append(getSubscriberType());
		sb.append(", actionName=");
		sb.append(getActionName());
		sb.append(", nextActionType=");
		sb.append(getNextActionType());
		sb.append(", nextCommandId=");
		sb.append(getNextCommandId());
		sb.append(", processClass=");
		sb.append(getProcessClass());
		sb.append(", processMethod=");
		sb.append(getProcessMethod());
		sb.append(", properties=");
		sb.append(getProperties());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.cmc.gateway.domain.model.CommandAction");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>actionId</column-name><column-value><![CDATA[");
		sb.append(getActionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commandId</column-name><column-value><![CDATA[");
		sb.append(getCommandId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productId</column-name><column-value><![CDATA[");
		sb.append(getProductId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionType</column-name><column-value><![CDATA[");
		sb.append(getActionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subscriberType</column-name><column-value><![CDATA[");
		sb.append(getSubscriberType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionName</column-name><column-value><![CDATA[");
		sb.append(getActionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextActionType</column-name><column-value><![CDATA[");
		sb.append(getNextActionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextCommandId</column-name><column-value><![CDATA[");
		sb.append(getNextCommandId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processClass</column-name><column-value><![CDATA[");
		sb.append(getProcessClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processMethod</column-name><column-value><![CDATA[");
		sb.append(getProcessMethod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>properties</column-name><column-value><![CDATA[");
		sb.append(getProperties());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CommandAction.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			CommandAction.class
		};
	private long _actionId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private long _commandId;
	private long _originalCommandId;
	private boolean _setOriginalCommandId;
	private long _productId;
	private long _originalProductId;
	private boolean _setOriginalProductId;
	private String _actionType;
	private String _originalActionType;
	private int _subscriberType;
	private int _originalSubscriberType;
	private boolean _setOriginalSubscriberType;
	private String _actionName;
	private String _originalActionName;
	private String _nextActionType;
	private long _nextCommandId;
	private long _originalNextCommandId;
	private boolean _setOriginalNextCommandId;
	private String _processClass;
	private String _processMethod;
	private String _properties;
	private String _description;
	private long _columnBitmask;
	private CommandAction _escapedModelProxy;
}