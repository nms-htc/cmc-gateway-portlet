/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cmc.gateway.domain.model.impl;

import com.cmc.gateway.domain.model.ProductEntry;
import com.cmc.gateway.domain.model.ProductEntryModel;
import com.cmc.gateway.domain.model.ProductEntrySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProductEntry service. Represents a row in the &quot;GW_ProductEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cmc.gateway.domain.model.ProductEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductEntryImpl}.
 * </p>
 *
 * @author Richard Nguyen
 * @see ProductEntryImpl
 * @see com.cmc.gateway.domain.model.ProductEntry
 * @see com.cmc.gateway.domain.model.ProductEntryModel
 * @generated
 */
@JSON(strict = true)
public class ProductEntryModelImpl extends BaseModelImpl<ProductEntry>
	implements ProductEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a product entry model instance should use the {@link com.cmc.gateway.domain.model.ProductEntry} interface instead.
	 */
	public static final String TABLE_NAME = "GW_ProductEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "productId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "categoryId", Types.BIGINT },
			{ "productType", Types.VARCHAR },
			{ "CODE", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "sku", Types.VARCHAR },
			{ "price", Types.DOUBLE },
			{ "subscriberTypes", Types.VARCHAR },
			{ "termOfUse", Types.BOOLEAN },
			{ "termPeriod", Types.INTEGER },
			{ "termUnit", Types.VARCHAR },
			{ "subscription", Types.BOOLEAN },
			{ "subscriptionUnit", Types.VARCHAR },
			{ "subscriptionPeriod", Types.INTEGER },
			{ "gracePeriod", Types.INTEGER },
			{ "graceUnit", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GW_ProductEntry (productId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,categoryId LONG,productType VARCHAR(75) null,CODE VARCHAR(75) null,title VARCHAR(75) null,sku VARCHAR(75) null,price DOUBLE,subscriberTypes VARCHAR(75) null,termOfUse BOOLEAN,termPeriod INTEGER,termUnit VARCHAR(75) null,subscription BOOLEAN,subscriptionUnit VARCHAR(75) null,subscriptionPeriod INTEGER,gracePeriod INTEGER,graceUnit VARCHAR(75) null,status INTEGER,description STRING null)";
	public static final String TABLE_SQL_DROP = "drop table GW_ProductEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY productEntry.code ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GW_ProductEntry.CODE ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cmc.gateway.domain.model.ProductEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cmc.gateway.domain.model.ProductEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cmc.gateway.domain.model.ProductEntry"),
			true);
	public static long CATEGORYID_COLUMN_BITMASK = 1L;
	public static long CODE_COLUMN_BITMASK = 2L;
	public static long PRODUCTTYPE_COLUMN_BITMASK = 4L;
	public static long STATUS_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProductEntry toModel(ProductEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProductEntry model = new ProductEntryImpl();

		model.setProductId(soapModel.getProductId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCategoryId(soapModel.getCategoryId());
		model.setProductType(soapModel.getProductType());
		model.setCode(soapModel.getCode());
		model.setTitle(soapModel.getTitle());
		model.setSku(soapModel.getSku());
		model.setPrice(soapModel.getPrice());
		model.setSubscriberTypes(soapModel.getSubscriberTypes());
		model.setTermOfUse(soapModel.getTermOfUse());
		model.setTermPeriod(soapModel.getTermPeriod());
		model.setTermUnit(soapModel.getTermUnit());
		model.setSubscription(soapModel.getSubscription());
		model.setSubscriptionUnit(soapModel.getSubscriptionUnit());
		model.setSubscriptionPeriod(soapModel.getSubscriptionPeriod());
		model.setGracePeriod(soapModel.getGracePeriod());
		model.setGraceUnit(soapModel.getGraceUnit());
		model.setStatus(soapModel.getStatus());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProductEntry> toModels(ProductEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProductEntry> models = new ArrayList<ProductEntry>(soapModels.length);

		for (ProductEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cmc.gateway.domain.model.ProductEntry"));

	public ProductEntryModelImpl() {
	}

	public long getPrimaryKey() {
		return _productId;
	}

	public void setPrimaryKey(long primaryKey) {
		setProductId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_productId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ProductEntry.class;
	}

	public String getModelClassName() {
		return ProductEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("productId", getProductId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("categoryId", getCategoryId());
		attributes.put("productType", getProductType());
		attributes.put("code", getCode());
		attributes.put("title", getTitle());
		attributes.put("sku", getSku());
		attributes.put("price", getPrice());
		attributes.put("subscriberTypes", getSubscriberTypes());
		attributes.put("termOfUse", getTermOfUse());
		attributes.put("termPeriod", getTermPeriod());
		attributes.put("termUnit", getTermUnit());
		attributes.put("subscription", getSubscription());
		attributes.put("subscriptionUnit", getSubscriptionUnit());
		attributes.put("subscriptionPeriod", getSubscriptionPeriod());
		attributes.put("gracePeriod", getGracePeriod());
		attributes.put("graceUnit", getGraceUnit());
		attributes.put("status", getStatus());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long productId = (Long)attributes.get("productId");

		if (productId != null) {
			setProductId(productId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		String productType = (String)attributes.get("productType");

		if (productType != null) {
			setProductType(productType);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String sku = (String)attributes.get("sku");

		if (sku != null) {
			setSku(sku);
		}

		Double price = (Double)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		String subscriberTypes = (String)attributes.get("subscriberTypes");

		if (subscriberTypes != null) {
			setSubscriberTypes(subscriberTypes);
		}

		Boolean termOfUse = (Boolean)attributes.get("termOfUse");

		if (termOfUse != null) {
			setTermOfUse(termOfUse);
		}

		Integer termPeriod = (Integer)attributes.get("termPeriod");

		if (termPeriod != null) {
			setTermPeriod(termPeriod);
		}

		String termUnit = (String)attributes.get("termUnit");

		if (termUnit != null) {
			setTermUnit(termUnit);
		}

		Boolean subscription = (Boolean)attributes.get("subscription");

		if (subscription != null) {
			setSubscription(subscription);
		}

		String subscriptionUnit = (String)attributes.get("subscriptionUnit");

		if (subscriptionUnit != null) {
			setSubscriptionUnit(subscriptionUnit);
		}

		Integer subscriptionPeriod = (Integer)attributes.get(
				"subscriptionPeriod");

		if (subscriptionPeriod != null) {
			setSubscriptionPeriod(subscriptionPeriod);
		}

		Integer gracePeriod = (Integer)attributes.get("gracePeriod");

		if (gracePeriod != null) {
			setGracePeriod(gracePeriod);
		}

		String graceUnit = (String)attributes.get("graceUnit");

		if (graceUnit != null) {
			setGraceUnit(graceUnit);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	public long getProductId() {
		return _productId;
	}

	public void setProductId(long productId) {
		_productId = productId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public long getCategoryId() {
		return _categoryId;
	}

	public void setCategoryId(long categoryId) {
		_columnBitmask |= CATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalCategoryId) {
			_setOriginalCategoryId = true;

			_originalCategoryId = _categoryId;
		}

		_categoryId = categoryId;
	}

	public long getOriginalCategoryId() {
		return _originalCategoryId;
	}

	@JSON
	public String getProductType() {
		if (_productType == null) {
			return StringPool.BLANK;
		}
		else {
			return _productType;
		}
	}

	public void setProductType(String productType) {
		_columnBitmask |= PRODUCTTYPE_COLUMN_BITMASK;

		if (_originalProductType == null) {
			_originalProductType = _productType;
		}

		_productType = productType;
	}

	public String getOriginalProductType() {
		return GetterUtil.getString(_originalProductType);
	}

	@JSON
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	public void setCode(String code) {
		_columnBitmask = -1L;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@JSON
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	public String getSku() {
		if (_sku == null) {
			return StringPool.BLANK;
		}
		else {
			return _sku;
		}
	}

	public void setSku(String sku) {
		_sku = sku;
	}

	@JSON
	public double getPrice() {
		return _price;
	}

	public void setPrice(double price) {
		_price = price;
	}

	@JSON
	public String getSubscriberTypes() {
		if (_subscriberTypes == null) {
			return StringPool.BLANK;
		}
		else {
			return _subscriberTypes;
		}
	}

	public void setSubscriberTypes(String subscriberTypes) {
		_subscriberTypes = subscriberTypes;
	}

	@JSON
	public boolean getTermOfUse() {
		return _termOfUse;
	}

	public boolean isTermOfUse() {
		return _termOfUse;
	}

	public void setTermOfUse(boolean termOfUse) {
		_termOfUse = termOfUse;
	}

	@JSON
	public int getTermPeriod() {
		return _termPeriod;
	}

	public void setTermPeriod(int termPeriod) {
		_termPeriod = termPeriod;
	}

	@JSON
	public String getTermUnit() {
		if (_termUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _termUnit;
		}
	}

	public void setTermUnit(String termUnit) {
		_termUnit = termUnit;
	}

	@JSON
	public boolean getSubscription() {
		return _subscription;
	}

	public boolean isSubscription() {
		return _subscription;
	}

	public void setSubscription(boolean subscription) {
		_subscription = subscription;
	}

	@JSON
	public String getSubscriptionUnit() {
		if (_subscriptionUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _subscriptionUnit;
		}
	}

	public void setSubscriptionUnit(String subscriptionUnit) {
		_subscriptionUnit = subscriptionUnit;
	}

	@JSON
	public int getSubscriptionPeriod() {
		return _subscriptionPeriod;
	}

	public void setSubscriptionPeriod(int subscriptionPeriod) {
		_subscriptionPeriod = subscriptionPeriod;
	}

	@JSON
	public int getGracePeriod() {
		return _gracePeriod;
	}

	public void setGracePeriod(int gracePeriod) {
		_gracePeriod = gracePeriod;
	}

	@JSON
	public String getGraceUnit() {
		if (_graceUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _graceUnit;
		}
	}

	public void setGraceUnit(String graceUnit) {
		_graceUnit = graceUnit;
	}

	@JSON
	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ProductEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProductEntry toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (ProductEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		ProductEntryImpl productEntryImpl = new ProductEntryImpl();

		productEntryImpl.setProductId(getProductId());
		productEntryImpl.setGroupId(getGroupId());
		productEntryImpl.setCompanyId(getCompanyId());
		productEntryImpl.setUserId(getUserId());
		productEntryImpl.setCreateDate(getCreateDate());
		productEntryImpl.setModifiedDate(getModifiedDate());
		productEntryImpl.setCategoryId(getCategoryId());
		productEntryImpl.setProductType(getProductType());
		productEntryImpl.setCode(getCode());
		productEntryImpl.setTitle(getTitle());
		productEntryImpl.setSku(getSku());
		productEntryImpl.setPrice(getPrice());
		productEntryImpl.setSubscriberTypes(getSubscriberTypes());
		productEntryImpl.setTermOfUse(getTermOfUse());
		productEntryImpl.setTermPeriod(getTermPeriod());
		productEntryImpl.setTermUnit(getTermUnit());
		productEntryImpl.setSubscription(getSubscription());
		productEntryImpl.setSubscriptionUnit(getSubscriptionUnit());
		productEntryImpl.setSubscriptionPeriod(getSubscriptionPeriod());
		productEntryImpl.setGracePeriod(getGracePeriod());
		productEntryImpl.setGraceUnit(getGraceUnit());
		productEntryImpl.setStatus(getStatus());
		productEntryImpl.setDescription(getDescription());

		productEntryImpl.resetOriginalValues();

		return productEntryImpl;
	}

	public int compareTo(ProductEntry productEntry) {
		int value = 0;

		value = getCode().compareTo(productEntry.getCode());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ProductEntry productEntry = null;

		try {
			productEntry = (ProductEntry)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = productEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ProductEntryModelImpl productEntryModelImpl = this;

		productEntryModelImpl._originalCategoryId = productEntryModelImpl._categoryId;

		productEntryModelImpl._setOriginalCategoryId = false;

		productEntryModelImpl._originalProductType = productEntryModelImpl._productType;

		productEntryModelImpl._originalCode = productEntryModelImpl._code;

		productEntryModelImpl._originalStatus = productEntryModelImpl._status;

		productEntryModelImpl._setOriginalStatus = false;

		productEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProductEntry> toCacheModel() {
		ProductEntryCacheModel productEntryCacheModel = new ProductEntryCacheModel();

		productEntryCacheModel.productId = getProductId();

		productEntryCacheModel.groupId = getGroupId();

		productEntryCacheModel.companyId = getCompanyId();

		productEntryCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			productEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			productEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			productEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			productEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		productEntryCacheModel.categoryId = getCategoryId();

		productEntryCacheModel.productType = getProductType();

		String productType = productEntryCacheModel.productType;

		if ((productType != null) && (productType.length() == 0)) {
			productEntryCacheModel.productType = null;
		}

		productEntryCacheModel.code = getCode();

		String code = productEntryCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			productEntryCacheModel.code = null;
		}

		productEntryCacheModel.title = getTitle();

		String title = productEntryCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			productEntryCacheModel.title = null;
		}

		productEntryCacheModel.sku = getSku();

		String sku = productEntryCacheModel.sku;

		if ((sku != null) && (sku.length() == 0)) {
			productEntryCacheModel.sku = null;
		}

		productEntryCacheModel.price = getPrice();

		productEntryCacheModel.subscriberTypes = getSubscriberTypes();

		String subscriberTypes = productEntryCacheModel.subscriberTypes;

		if ((subscriberTypes != null) && (subscriberTypes.length() == 0)) {
			productEntryCacheModel.subscriberTypes = null;
		}

		productEntryCacheModel.termOfUse = getTermOfUse();

		productEntryCacheModel.termPeriod = getTermPeriod();

		productEntryCacheModel.termUnit = getTermUnit();

		String termUnit = productEntryCacheModel.termUnit;

		if ((termUnit != null) && (termUnit.length() == 0)) {
			productEntryCacheModel.termUnit = null;
		}

		productEntryCacheModel.subscription = getSubscription();

		productEntryCacheModel.subscriptionUnit = getSubscriptionUnit();

		String subscriptionUnit = productEntryCacheModel.subscriptionUnit;

		if ((subscriptionUnit != null) && (subscriptionUnit.length() == 0)) {
			productEntryCacheModel.subscriptionUnit = null;
		}

		productEntryCacheModel.subscriptionPeriod = getSubscriptionPeriod();

		productEntryCacheModel.gracePeriod = getGracePeriod();

		productEntryCacheModel.graceUnit = getGraceUnit();

		String graceUnit = productEntryCacheModel.graceUnit;

		if ((graceUnit != null) && (graceUnit.length() == 0)) {
			productEntryCacheModel.graceUnit = null;
		}

		productEntryCacheModel.status = getStatus();

		productEntryCacheModel.description = getDescription();

		String description = productEntryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			productEntryCacheModel.description = null;
		}

		return productEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(47);

		sb.append("{productId=");
		sb.append(getProductId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", productType=");
		sb.append(getProductType());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", sku=");
		sb.append(getSku());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", subscriberTypes=");
		sb.append(getSubscriberTypes());
		sb.append(", termOfUse=");
		sb.append(getTermOfUse());
		sb.append(", termPeriod=");
		sb.append(getTermPeriod());
		sb.append(", termUnit=");
		sb.append(getTermUnit());
		sb.append(", subscription=");
		sb.append(getSubscription());
		sb.append(", subscriptionUnit=");
		sb.append(getSubscriptionUnit());
		sb.append(", subscriptionPeriod=");
		sb.append(getSubscriptionPeriod());
		sb.append(", gracePeriod=");
		sb.append(getGracePeriod());
		sb.append(", graceUnit=");
		sb.append(getGraceUnit());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(73);

		sb.append("<model><model-name>");
		sb.append("com.cmc.gateway.domain.model.ProductEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>productId</column-name><column-value><![CDATA[");
		sb.append(getProductId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productType</column-name><column-value><![CDATA[");
		sb.append(getProductType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sku</column-name><column-value><![CDATA[");
		sb.append(getSku());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subscriberTypes</column-name><column-value><![CDATA[");
		sb.append(getSubscriberTypes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>termOfUse</column-name><column-value><![CDATA[");
		sb.append(getTermOfUse());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>termPeriod</column-name><column-value><![CDATA[");
		sb.append(getTermPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>termUnit</column-name><column-value><![CDATA[");
		sb.append(getTermUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subscription</column-name><column-value><![CDATA[");
		sb.append(getSubscription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subscriptionUnit</column-name><column-value><![CDATA[");
		sb.append(getSubscriptionUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subscriptionPeriod</column-name><column-value><![CDATA[");
		sb.append(getSubscriptionPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gracePeriod</column-name><column-value><![CDATA[");
		sb.append(getGracePeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>graceUnit</column-name><column-value><![CDATA[");
		sb.append(getGraceUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ProductEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			ProductEntry.class
		};
	private long _productId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private long _categoryId;
	private long _originalCategoryId;
	private boolean _setOriginalCategoryId;
	private String _productType;
	private String _originalProductType;
	private String _code;
	private String _originalCode;
	private String _title;
	private String _sku;
	private double _price;
	private String _subscriberTypes;
	private boolean _termOfUse;
	private int _termPeriod;
	private String _termUnit;
	private boolean _subscription;
	private String _subscriptionUnit;
	private int _subscriptionPeriod;
	private int _gracePeriod;
	private String _graceUnit;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private String _description;
	private long _columnBitmask;
	private ProductEntry _escapedModelProxy;
}