/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cmc.gateway.domain.model.impl;

import com.cmc.gateway.domain.model.ProvisioningAction;
import com.cmc.gateway.domain.model.ProvisioningActionModel;
import com.cmc.gateway.domain.model.ProvisioningActionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProvisioningAction service. Represents a row in the &quot;GW_ProvisioningAction&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cmc.gateway.domain.model.ProvisioningActionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProvisioningActionImpl}.
 * </p>
 *
 * @author Richard Nguyen
 * @see ProvisioningActionImpl
 * @see com.cmc.gateway.domain.model.ProvisioningAction
 * @see com.cmc.gateway.domain.model.ProvisioningActionModel
 * @generated
 */
@JSON(strict = true)
public class ProvisioningActionModelImpl extends BaseModelImpl<ProvisioningAction>
	implements ProvisioningActionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a provisioning action model instance should use the {@link com.cmc.gateway.domain.model.ProvisioningAction} interface instead.
	 */
	public static final String TABLE_NAME = "GW_ProvisioningAction";
	public static final Object[][] TABLE_COLUMNS = {
			{ "actionId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "provisioningId", Types.BIGINT },
			{ "commandId", Types.BIGINT },
			{ "priority", Types.INTEGER },
			{ "timeout", Types.INTEGER },
			{ "retryEnable", Types.BOOLEAN },
			{ "maxRetry", Types.INTEGER },
			{ "logEnable", Types.BOOLEAN },
			{ "processClass", Types.VARCHAR },
			{ "processMethod", Types.VARCHAR },
			{ "properties", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GW_ProvisioningAction (actionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,provisioningId LONG,commandId LONG,priority INTEGER,timeout INTEGER,retryEnable BOOLEAN,maxRetry INTEGER,logEnable BOOLEAN,processClass VARCHAR(75) null,processMethod VARCHAR(75) null,properties STRING null,status INTEGER,description STRING null)";
	public static final String TABLE_SQL_DROP = "drop table GW_ProvisioningAction";
	public static final String ORDER_BY_JPQL = " ORDER BY provisioningAction.provisioningId ASC, provisioningAction.commandId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GW_ProvisioningAction.provisioningId ASC, GW_ProvisioningAction.commandId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cmc.gateway.domain.model.ProvisioningAction"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cmc.gateway.domain.model.ProvisioningAction"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cmc.gateway.domain.model.ProvisioningAction"),
			true);
	public static long COMMANDID_COLUMN_BITMASK = 1L;
	public static long PROVISIONINGID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProvisioningAction toModel(ProvisioningActionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProvisioningAction model = new ProvisioningActionImpl();

		model.setActionId(soapModel.getActionId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setProvisioningId(soapModel.getProvisioningId());
		model.setCommandId(soapModel.getCommandId());
		model.setPriority(soapModel.getPriority());
		model.setTimeout(soapModel.getTimeout());
		model.setRetryEnable(soapModel.getRetryEnable());
		model.setMaxRetry(soapModel.getMaxRetry());
		model.setLogEnable(soapModel.getLogEnable());
		model.setProcessClass(soapModel.getProcessClass());
		model.setProcessMethod(soapModel.getProcessMethod());
		model.setProperties(soapModel.getProperties());
		model.setStatus(soapModel.getStatus());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProvisioningAction> toModels(
		ProvisioningActionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProvisioningAction> models = new ArrayList<ProvisioningAction>(soapModels.length);

		for (ProvisioningActionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cmc.gateway.domain.model.ProvisioningAction"));

	public ProvisioningActionModelImpl() {
	}

	public long getPrimaryKey() {
		return _actionId;
	}

	public void setPrimaryKey(long primaryKey) {
		setActionId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_actionId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ProvisioningAction.class;
	}

	public String getModelClassName() {
		return ProvisioningAction.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("actionId", getActionId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("provisioningId", getProvisioningId());
		attributes.put("commandId", getCommandId());
		attributes.put("priority", getPriority());
		attributes.put("timeout", getTimeout());
		attributes.put("retryEnable", getRetryEnable());
		attributes.put("maxRetry", getMaxRetry());
		attributes.put("logEnable", getLogEnable());
		attributes.put("processClass", getProcessClass());
		attributes.put("processMethod", getProcessMethod());
		attributes.put("properties", getProperties());
		attributes.put("status", getStatus());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long actionId = (Long)attributes.get("actionId");

		if (actionId != null) {
			setActionId(actionId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long provisioningId = (Long)attributes.get("provisioningId");

		if (provisioningId != null) {
			setProvisioningId(provisioningId);
		}

		Long commandId = (Long)attributes.get("commandId");

		if (commandId != null) {
			setCommandId(commandId);
		}

		Integer priority = (Integer)attributes.get("priority");

		if (priority != null) {
			setPriority(priority);
		}

		Integer timeout = (Integer)attributes.get("timeout");

		if (timeout != null) {
			setTimeout(timeout);
		}

		Boolean retryEnable = (Boolean)attributes.get("retryEnable");

		if (retryEnable != null) {
			setRetryEnable(retryEnable);
		}

		Integer maxRetry = (Integer)attributes.get("maxRetry");

		if (maxRetry != null) {
			setMaxRetry(maxRetry);
		}

		Boolean logEnable = (Boolean)attributes.get("logEnable");

		if (logEnable != null) {
			setLogEnable(logEnable);
		}

		String processClass = (String)attributes.get("processClass");

		if (processClass != null) {
			setProcessClass(processClass);
		}

		String processMethod = (String)attributes.get("processMethod");

		if (processMethod != null) {
			setProcessMethod(processMethod);
		}

		String properties = (String)attributes.get("properties");

		if (properties != null) {
			setProperties(properties);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	public long getActionId() {
		return _actionId;
	}

	public void setActionId(long actionId) {
		_actionId = actionId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public long getProvisioningId() {
		return _provisioningId;
	}

	public void setProvisioningId(long provisioningId) {
		_columnBitmask = -1L;

		if (!_setOriginalProvisioningId) {
			_setOriginalProvisioningId = true;

			_originalProvisioningId = _provisioningId;
		}

		_provisioningId = provisioningId;
	}

	public long getOriginalProvisioningId() {
		return _originalProvisioningId;
	}

	@JSON
	public long getCommandId() {
		return _commandId;
	}

	public void setCommandId(long commandId) {
		_columnBitmask = -1L;

		if (!_setOriginalCommandId) {
			_setOriginalCommandId = true;

			_originalCommandId = _commandId;
		}

		_commandId = commandId;
	}

	public long getOriginalCommandId() {
		return _originalCommandId;
	}

	@JSON
	public int getPriority() {
		return _priority;
	}

	public void setPriority(int priority) {
		_priority = priority;
	}

	@JSON
	public int getTimeout() {
		return _timeout;
	}

	public void setTimeout(int timeout) {
		_timeout = timeout;
	}

	@JSON
	public boolean getRetryEnable() {
		return _retryEnable;
	}

	public boolean isRetryEnable() {
		return _retryEnable;
	}

	public void setRetryEnable(boolean retryEnable) {
		_retryEnable = retryEnable;
	}

	@JSON
	public int getMaxRetry() {
		return _maxRetry;
	}

	public void setMaxRetry(int maxRetry) {
		_maxRetry = maxRetry;
	}

	@JSON
	public boolean getLogEnable() {
		return _logEnable;
	}

	public boolean isLogEnable() {
		return _logEnable;
	}

	public void setLogEnable(boolean logEnable) {
		_logEnable = logEnable;
	}

	@JSON
	public String getProcessClass() {
		if (_processClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _processClass;
		}
	}

	public void setProcessClass(String processClass) {
		_processClass = processClass;
	}

	@JSON
	public String getProcessMethod() {
		if (_processMethod == null) {
			return StringPool.BLANK;
		}
		else {
			return _processMethod;
		}
	}

	public void setProcessMethod(String processMethod) {
		_processMethod = processMethod;
	}

	@JSON
	public String getProperties() {
		if (_properties == null) {
			return StringPool.BLANK;
		}
		else {
			return _properties;
		}
	}

	public void setProperties(String properties) {
		_properties = properties;
	}

	@JSON
	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ProvisioningAction.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProvisioningAction toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (ProvisioningAction)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		ProvisioningActionImpl provisioningActionImpl = new ProvisioningActionImpl();

		provisioningActionImpl.setActionId(getActionId());
		provisioningActionImpl.setGroupId(getGroupId());
		provisioningActionImpl.setCompanyId(getCompanyId());
		provisioningActionImpl.setUserId(getUserId());
		provisioningActionImpl.setCreateDate(getCreateDate());
		provisioningActionImpl.setModifiedDate(getModifiedDate());
		provisioningActionImpl.setProvisioningId(getProvisioningId());
		provisioningActionImpl.setCommandId(getCommandId());
		provisioningActionImpl.setPriority(getPriority());
		provisioningActionImpl.setTimeout(getTimeout());
		provisioningActionImpl.setRetryEnable(getRetryEnable());
		provisioningActionImpl.setMaxRetry(getMaxRetry());
		provisioningActionImpl.setLogEnable(getLogEnable());
		provisioningActionImpl.setProcessClass(getProcessClass());
		provisioningActionImpl.setProcessMethod(getProcessMethod());
		provisioningActionImpl.setProperties(getProperties());
		provisioningActionImpl.setStatus(getStatus());
		provisioningActionImpl.setDescription(getDescription());

		provisioningActionImpl.resetOriginalValues();

		return provisioningActionImpl;
	}

	public int compareTo(ProvisioningAction provisioningAction) {
		int value = 0;

		if (getProvisioningId() < provisioningAction.getProvisioningId()) {
			value = -1;
		}
		else if (getProvisioningId() > provisioningAction.getProvisioningId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getCommandId() < provisioningAction.getCommandId()) {
			value = -1;
		}
		else if (getCommandId() > provisioningAction.getCommandId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ProvisioningAction provisioningAction = null;

		try {
			provisioningAction = (ProvisioningAction)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = provisioningAction.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ProvisioningActionModelImpl provisioningActionModelImpl = this;

		provisioningActionModelImpl._originalProvisioningId = provisioningActionModelImpl._provisioningId;

		provisioningActionModelImpl._setOriginalProvisioningId = false;

		provisioningActionModelImpl._originalCommandId = provisioningActionModelImpl._commandId;

		provisioningActionModelImpl._setOriginalCommandId = false;

		provisioningActionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProvisioningAction> toCacheModel() {
		ProvisioningActionCacheModel provisioningActionCacheModel = new ProvisioningActionCacheModel();

		provisioningActionCacheModel.actionId = getActionId();

		provisioningActionCacheModel.groupId = getGroupId();

		provisioningActionCacheModel.companyId = getCompanyId();

		provisioningActionCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			provisioningActionCacheModel.createDate = createDate.getTime();
		}
		else {
			provisioningActionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			provisioningActionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			provisioningActionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		provisioningActionCacheModel.provisioningId = getProvisioningId();

		provisioningActionCacheModel.commandId = getCommandId();

		provisioningActionCacheModel.priority = getPriority();

		provisioningActionCacheModel.timeout = getTimeout();

		provisioningActionCacheModel.retryEnable = getRetryEnable();

		provisioningActionCacheModel.maxRetry = getMaxRetry();

		provisioningActionCacheModel.logEnable = getLogEnable();

		provisioningActionCacheModel.processClass = getProcessClass();

		String processClass = provisioningActionCacheModel.processClass;

		if ((processClass != null) && (processClass.length() == 0)) {
			provisioningActionCacheModel.processClass = null;
		}

		provisioningActionCacheModel.processMethod = getProcessMethod();

		String processMethod = provisioningActionCacheModel.processMethod;

		if ((processMethod != null) && (processMethod.length() == 0)) {
			provisioningActionCacheModel.processMethod = null;
		}

		provisioningActionCacheModel.properties = getProperties();

		String properties = provisioningActionCacheModel.properties;

		if ((properties != null) && (properties.length() == 0)) {
			provisioningActionCacheModel.properties = null;
		}

		provisioningActionCacheModel.status = getStatus();

		provisioningActionCacheModel.description = getDescription();

		String description = provisioningActionCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			provisioningActionCacheModel.description = null;
		}

		return provisioningActionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{actionId=");
		sb.append(getActionId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", provisioningId=");
		sb.append(getProvisioningId());
		sb.append(", commandId=");
		sb.append(getCommandId());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append(", timeout=");
		sb.append(getTimeout());
		sb.append(", retryEnable=");
		sb.append(getRetryEnable());
		sb.append(", maxRetry=");
		sb.append(getMaxRetry());
		sb.append(", logEnable=");
		sb.append(getLogEnable());
		sb.append(", processClass=");
		sb.append(getProcessClass());
		sb.append(", processMethod=");
		sb.append(getProcessMethod());
		sb.append(", properties=");
		sb.append(getProperties());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.cmc.gateway.domain.model.ProvisioningAction");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>actionId</column-name><column-value><![CDATA[");
		sb.append(getActionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>provisioningId</column-name><column-value><![CDATA[");
		sb.append(getProvisioningId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commandId</column-name><column-value><![CDATA[");
		sb.append(getCommandId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeout</column-name><column-value><![CDATA[");
		sb.append(getTimeout());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>retryEnable</column-name><column-value><![CDATA[");
		sb.append(getRetryEnable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxRetry</column-name><column-value><![CDATA[");
		sb.append(getMaxRetry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logEnable</column-name><column-value><![CDATA[");
		sb.append(getLogEnable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processClass</column-name><column-value><![CDATA[");
		sb.append(getProcessClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processMethod</column-name><column-value><![CDATA[");
		sb.append(getProcessMethod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>properties</column-name><column-value><![CDATA[");
		sb.append(getProperties());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ProvisioningAction.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			ProvisioningAction.class
		};
	private long _actionId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private long _provisioningId;
	private long _originalProvisioningId;
	private boolean _setOriginalProvisioningId;
	private long _commandId;
	private long _originalCommandId;
	private boolean _setOriginalCommandId;
	private int _priority;
	private int _timeout;
	private boolean _retryEnable;
	private int _maxRetry;
	private boolean _logEnable;
	private String _processClass;
	private String _processMethod;
	private String _properties;
	private int _status;
	private String _description;
	private long _columnBitmask;
	private ProvisioningAction _escapedModelProxy;
}