/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cmc.gateway.domain.model.impl;

import com.cmc.gateway.domain.model.ProductRoute;
import com.cmc.gateway.domain.model.ProductRouteModel;
import com.cmc.gateway.domain.model.ProductRouteSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProductRoute service. Represents a row in the &quot;GW_ProductRoute&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cmc.gateway.domain.model.ProductRouteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductRouteImpl}.
 * </p>
 *
 * @author Richard Nguyen
 * @see ProductRouteImpl
 * @see com.cmc.gateway.domain.model.ProductRoute
 * @see com.cmc.gateway.domain.model.ProductRouteModel
 * @generated
 */
@JSON(strict = true)
public class ProductRouteModelImpl extends BaseModelImpl<ProductRoute>
	implements ProductRouteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a product route model instance should use the {@link com.cmc.gateway.domain.model.ProductRoute} interface instead.
	 */
	public static final String TABLE_NAME = "GW_ProductRoute";
	public static final Object[][] TABLE_COLUMNS = {
			{ "routeId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "channel", Types.VARCHAR },
			{ "serviceAddress", Types.VARCHAR },
			{ "keyword", Types.VARCHAR },
			{ "openTime", Types.VARCHAR },
			{ "closedTime", Types.VARCHAR },
			{ "checkBalance", Types.BOOLEAN },
			{ "smsMinParams", Types.INTEGER },
			{ "smsMaxParams", Types.INTEGER },
			{ "actionType", Types.VARCHAR },
			{ "productId", Types.BIGINT },
			{ "campaignId", Types.BIGINT },
			{ "languageId", Types.VARCHAR },
			{ "synchronous", Types.BOOLEAN },
			{ "createOrder", Types.BOOLEAN },
			{ "timeout", Types.INTEGER },
			{ "maxRegisterDaily", Types.INTEGER },
			{ "duplicateScan", Types.INTEGER },
			{ "checkSpam", Types.BOOLEAN },
			{ "fraudTimes", Types.INTEGER },
			{ "fraudPeriod", Types.INTEGER },
			{ "fraudUnit", Types.VARCHAR },
			{ "rejectUnit", Types.VARCHAR },
			{ "rejectPeriod", Types.INTEGER },
			{ "baseChargeEnable", Types.BOOLEAN },
			{ "chargingAmount", Types.DOUBLE },
			{ "notifyOwner", Types.BOOLEAN },
			{ "notifyDeliver", Types.BOOLEAN },
			{ "sendAdvertising", Types.BOOLEAN },
			{ "checkPromotion", Types.BOOLEAN },
			{ "topupEnable", Types.BOOLEAN },
			{ "properties", Types.VARCHAR },
			{ "queueName", Types.VARCHAR },
			{ "processClass", Types.VARCHAR },
			{ "processMethod", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "startDate", Types.TIMESTAMP },
			{ "expirationDate", Types.TIMESTAMP },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GW_ProductRoute (routeId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,channel VARCHAR(75) null,serviceAddress VARCHAR(75) null,keyword VARCHAR(75) null,openTime VARCHAR(75) null,closedTime VARCHAR(75) null,checkBalance BOOLEAN,smsMinParams INTEGER,smsMaxParams INTEGER,actionType VARCHAR(75) null,productId LONG,campaignId LONG,languageId VARCHAR(75) null,synchronous BOOLEAN,createOrder BOOLEAN,timeout INTEGER,maxRegisterDaily INTEGER,duplicateScan INTEGER,checkSpam BOOLEAN,fraudTimes INTEGER,fraudPeriod INTEGER,fraudUnit VARCHAR(75) null,rejectUnit VARCHAR(75) null,rejectPeriod INTEGER,baseChargeEnable BOOLEAN,chargingAmount DOUBLE,notifyOwner BOOLEAN,notifyDeliver BOOLEAN,sendAdvertising BOOLEAN,checkPromotion BOOLEAN,topupEnable BOOLEAN,properties STRING null,queueName VARCHAR(75) null,processClass VARCHAR(75) null,processMethod VARCHAR(75) null,status INTEGER,startDate DATE null,expirationDate DATE null,description STRING null)";
	public static final String TABLE_SQL_DROP = "drop table GW_ProductRoute";
	public static final String ORDER_BY_JPQL = " ORDER BY productRoute.channel ASC, productRoute.serviceAddress ASC, productRoute.keyword ASC, productRoute.openTime ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GW_ProductRoute.channel ASC, GW_ProductRoute.serviceAddress ASC, GW_ProductRoute.keyword ASC, GW_ProductRoute.openTime ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cmc.gateway.domain.model.ProductRoute"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cmc.gateway.domain.model.ProductRoute"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cmc.gateway.domain.model.ProductRoute"),
			true);
	public static long CHANNEL_COLUMN_BITMASK = 1L;
	public static long KEYWORD_COLUMN_BITMASK = 2L;
	public static long PRODUCTID_COLUMN_BITMASK = 4L;
	public static long SERVICEADDRESS_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProductRoute toModel(ProductRouteSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProductRoute model = new ProductRouteImpl();

		model.setRouteId(soapModel.getRouteId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setChannel(soapModel.getChannel());
		model.setServiceAddress(soapModel.getServiceAddress());
		model.setKeyword(soapModel.getKeyword());
		model.setOpenTime(soapModel.getOpenTime());
		model.setClosedTime(soapModel.getClosedTime());
		model.setCheckBalance(soapModel.getCheckBalance());
		model.setSmsMinParams(soapModel.getSmsMinParams());
		model.setSmsMaxParams(soapModel.getSmsMaxParams());
		model.setActionType(soapModel.getActionType());
		model.setProductId(soapModel.getProductId());
		model.setCampaignId(soapModel.getCampaignId());
		model.setLanguageId(soapModel.getLanguageId());
		model.setSynchronous(soapModel.getSynchronous());
		model.setCreateOrder(soapModel.getCreateOrder());
		model.setTimeout(soapModel.getTimeout());
		model.setMaxRegisterDaily(soapModel.getMaxRegisterDaily());
		model.setDuplicateScan(soapModel.getDuplicateScan());
		model.setCheckSpam(soapModel.getCheckSpam());
		model.setFraudTimes(soapModel.getFraudTimes());
		model.setFraudPeriod(soapModel.getFraudPeriod());
		model.setFraudUnit(soapModel.getFraudUnit());
		model.setRejectUnit(soapModel.getRejectUnit());
		model.setRejectPeriod(soapModel.getRejectPeriod());
		model.setBaseChargeEnable(soapModel.getBaseChargeEnable());
		model.setChargingAmount(soapModel.getChargingAmount());
		model.setNotifyOwner(soapModel.getNotifyOwner());
		model.setNotifyDeliver(soapModel.getNotifyDeliver());
		model.setSendAdvertising(soapModel.getSendAdvertising());
		model.setCheckPromotion(soapModel.getCheckPromotion());
		model.setTopupEnable(soapModel.getTopupEnable());
		model.setProperties(soapModel.getProperties());
		model.setQueueName(soapModel.getQueueName());
		model.setProcessClass(soapModel.getProcessClass());
		model.setProcessMethod(soapModel.getProcessMethod());
		model.setStatus(soapModel.getStatus());
		model.setStartDate(soapModel.getStartDate());
		model.setExpirationDate(soapModel.getExpirationDate());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProductRoute> toModels(ProductRouteSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProductRoute> models = new ArrayList<ProductRoute>(soapModels.length);

		for (ProductRouteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cmc.gateway.domain.model.ProductRoute"));

	public ProductRouteModelImpl() {
	}

	public long getPrimaryKey() {
		return _routeId;
	}

	public void setPrimaryKey(long primaryKey) {
		setRouteId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_routeId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ProductRoute.class;
	}

	public String getModelClassName() {
		return ProductRoute.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("routeId", getRouteId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("channel", getChannel());
		attributes.put("serviceAddress", getServiceAddress());
		attributes.put("keyword", getKeyword());
		attributes.put("openTime", getOpenTime());
		attributes.put("closedTime", getClosedTime());
		attributes.put("checkBalance", getCheckBalance());
		attributes.put("smsMinParams", getSmsMinParams());
		attributes.put("smsMaxParams", getSmsMaxParams());
		attributes.put("actionType", getActionType());
		attributes.put("productId", getProductId());
		attributes.put("campaignId", getCampaignId());
		attributes.put("languageId", getLanguageId());
		attributes.put("synchronous", getSynchronous());
		attributes.put("createOrder", getCreateOrder());
		attributes.put("timeout", getTimeout());
		attributes.put("maxRegisterDaily", getMaxRegisterDaily());
		attributes.put("duplicateScan", getDuplicateScan());
		attributes.put("checkSpam", getCheckSpam());
		attributes.put("fraudTimes", getFraudTimes());
		attributes.put("fraudPeriod", getFraudPeriod());
		attributes.put("fraudUnit", getFraudUnit());
		attributes.put("rejectUnit", getRejectUnit());
		attributes.put("rejectPeriod", getRejectPeriod());
		attributes.put("baseChargeEnable", getBaseChargeEnable());
		attributes.put("chargingAmount", getChargingAmount());
		attributes.put("notifyOwner", getNotifyOwner());
		attributes.put("notifyDeliver", getNotifyDeliver());
		attributes.put("sendAdvertising", getSendAdvertising());
		attributes.put("checkPromotion", getCheckPromotion());
		attributes.put("topupEnable", getTopupEnable());
		attributes.put("properties", getProperties());
		attributes.put("queueName", getQueueName());
		attributes.put("processClass", getProcessClass());
		attributes.put("processMethod", getProcessMethod());
		attributes.put("status", getStatus());
		attributes.put("startDate", getStartDate());
		attributes.put("expirationDate", getExpirationDate());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long routeId = (Long)attributes.get("routeId");

		if (routeId != null) {
			setRouteId(routeId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String channel = (String)attributes.get("channel");

		if (channel != null) {
			setChannel(channel);
		}

		String serviceAddress = (String)attributes.get("serviceAddress");

		if (serviceAddress != null) {
			setServiceAddress(serviceAddress);
		}

		String keyword = (String)attributes.get("keyword");

		if (keyword != null) {
			setKeyword(keyword);
		}

		String openTime = (String)attributes.get("openTime");

		if (openTime != null) {
			setOpenTime(openTime);
		}

		String closedTime = (String)attributes.get("closedTime");

		if (closedTime != null) {
			setClosedTime(closedTime);
		}

		Boolean checkBalance = (Boolean)attributes.get("checkBalance");

		if (checkBalance != null) {
			setCheckBalance(checkBalance);
		}

		Integer smsMinParams = (Integer)attributes.get("smsMinParams");

		if (smsMinParams != null) {
			setSmsMinParams(smsMinParams);
		}

		Integer smsMaxParams = (Integer)attributes.get("smsMaxParams");

		if (smsMaxParams != null) {
			setSmsMaxParams(smsMaxParams);
		}

		String actionType = (String)attributes.get("actionType");

		if (actionType != null) {
			setActionType(actionType);
		}

		Long productId = (Long)attributes.get("productId");

		if (productId != null) {
			setProductId(productId);
		}

		Long campaignId = (Long)attributes.get("campaignId");

		if (campaignId != null) {
			setCampaignId(campaignId);
		}

		String languageId = (String)attributes.get("languageId");

		if (languageId != null) {
			setLanguageId(languageId);
		}

		Boolean synchronous = (Boolean)attributes.get("synchronous");

		if (synchronous != null) {
			setSynchronous(synchronous);
		}

		Boolean createOrder = (Boolean)attributes.get("createOrder");

		if (createOrder != null) {
			setCreateOrder(createOrder);
		}

		Integer timeout = (Integer)attributes.get("timeout");

		if (timeout != null) {
			setTimeout(timeout);
		}

		Integer maxRegisterDaily = (Integer)attributes.get("maxRegisterDaily");

		if (maxRegisterDaily != null) {
			setMaxRegisterDaily(maxRegisterDaily);
		}

		Integer duplicateScan = (Integer)attributes.get("duplicateScan");

		if (duplicateScan != null) {
			setDuplicateScan(duplicateScan);
		}

		Boolean checkSpam = (Boolean)attributes.get("checkSpam");

		if (checkSpam != null) {
			setCheckSpam(checkSpam);
		}

		Integer fraudTimes = (Integer)attributes.get("fraudTimes");

		if (fraudTimes != null) {
			setFraudTimes(fraudTimes);
		}

		Integer fraudPeriod = (Integer)attributes.get("fraudPeriod");

		if (fraudPeriod != null) {
			setFraudPeriod(fraudPeriod);
		}

		String fraudUnit = (String)attributes.get("fraudUnit");

		if (fraudUnit != null) {
			setFraudUnit(fraudUnit);
		}

		String rejectUnit = (String)attributes.get("rejectUnit");

		if (rejectUnit != null) {
			setRejectUnit(rejectUnit);
		}

		Integer rejectPeriod = (Integer)attributes.get("rejectPeriod");

		if (rejectPeriod != null) {
			setRejectPeriod(rejectPeriod);
		}

		Boolean baseChargeEnable = (Boolean)attributes.get("baseChargeEnable");

		if (baseChargeEnable != null) {
			setBaseChargeEnable(baseChargeEnable);
		}

		Double chargingAmount = (Double)attributes.get("chargingAmount");

		if (chargingAmount != null) {
			setChargingAmount(chargingAmount);
		}

		Boolean notifyOwner = (Boolean)attributes.get("notifyOwner");

		if (notifyOwner != null) {
			setNotifyOwner(notifyOwner);
		}

		Boolean notifyDeliver = (Boolean)attributes.get("notifyDeliver");

		if (notifyDeliver != null) {
			setNotifyDeliver(notifyDeliver);
		}

		Boolean sendAdvertising = (Boolean)attributes.get("sendAdvertising");

		if (sendAdvertising != null) {
			setSendAdvertising(sendAdvertising);
		}

		Boolean checkPromotion = (Boolean)attributes.get("checkPromotion");

		if (checkPromotion != null) {
			setCheckPromotion(checkPromotion);
		}

		Boolean topupEnable = (Boolean)attributes.get("topupEnable");

		if (topupEnable != null) {
			setTopupEnable(topupEnable);
		}

		String properties = (String)attributes.get("properties");

		if (properties != null) {
			setProperties(properties);
		}

		String queueName = (String)attributes.get("queueName");

		if (queueName != null) {
			setQueueName(queueName);
		}

		String processClass = (String)attributes.get("processClass");

		if (processClass != null) {
			setProcessClass(processClass);
		}

		String processMethod = (String)attributes.get("processMethod");

		if (processMethod != null) {
			setProcessMethod(processMethod);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date expirationDate = (Date)attributes.get("expirationDate");

		if (expirationDate != null) {
			setExpirationDate(expirationDate);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	public long getRouteId() {
		return _routeId;
	}

	public void setRouteId(long routeId) {
		_routeId = routeId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getChannel() {
		if (_channel == null) {
			return StringPool.BLANK;
		}
		else {
			return _channel;
		}
	}

	public void setChannel(String channel) {
		_columnBitmask = -1L;

		if (_originalChannel == null) {
			_originalChannel = _channel;
		}

		_channel = channel;
	}

	public String getOriginalChannel() {
		return GetterUtil.getString(_originalChannel);
	}

	@JSON
	public String getServiceAddress() {
		if (_serviceAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _serviceAddress;
		}
	}

	public void setServiceAddress(String serviceAddress) {
		_columnBitmask = -1L;

		if (_originalServiceAddress == null) {
			_originalServiceAddress = _serviceAddress;
		}

		_serviceAddress = serviceAddress;
	}

	public String getOriginalServiceAddress() {
		return GetterUtil.getString(_originalServiceAddress);
	}

	@JSON
	public String getKeyword() {
		if (_keyword == null) {
			return StringPool.BLANK;
		}
		else {
			return _keyword;
		}
	}

	public void setKeyword(String keyword) {
		_columnBitmask = -1L;

		if (_originalKeyword == null) {
			_originalKeyword = _keyword;
		}

		_keyword = keyword;
	}

	public String getOriginalKeyword() {
		return GetterUtil.getString(_originalKeyword);
	}

	@JSON
	public String getOpenTime() {
		if (_openTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _openTime;
		}
	}

	public void setOpenTime(String openTime) {
		_columnBitmask = -1L;

		_openTime = openTime;
	}

	@JSON
	public String getClosedTime() {
		if (_closedTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _closedTime;
		}
	}

	public void setClosedTime(String closedTime) {
		_closedTime = closedTime;
	}

	@JSON
	public boolean getCheckBalance() {
		return _checkBalance;
	}

	public boolean isCheckBalance() {
		return _checkBalance;
	}

	public void setCheckBalance(boolean checkBalance) {
		_checkBalance = checkBalance;
	}

	@JSON
	public int getSmsMinParams() {
		return _smsMinParams;
	}

	public void setSmsMinParams(int smsMinParams) {
		_smsMinParams = smsMinParams;
	}

	@JSON
	public int getSmsMaxParams() {
		return _smsMaxParams;
	}

	public void setSmsMaxParams(int smsMaxParams) {
		_smsMaxParams = smsMaxParams;
	}

	@JSON
	public String getActionType() {
		if (_actionType == null) {
			return StringPool.BLANK;
		}
		else {
			return _actionType;
		}
	}

	public void setActionType(String actionType) {
		_actionType = actionType;
	}

	@JSON
	public long getProductId() {
		return _productId;
	}

	public void setProductId(long productId) {
		_columnBitmask |= PRODUCTID_COLUMN_BITMASK;

		if (!_setOriginalProductId) {
			_setOriginalProductId = true;

			_originalProductId = _productId;
		}

		_productId = productId;
	}

	public long getOriginalProductId() {
		return _originalProductId;
	}

	@JSON
	public long getCampaignId() {
		return _campaignId;
	}

	public void setCampaignId(long campaignId) {
		_campaignId = campaignId;
	}

	@JSON
	public String getLanguageId() {
		if (_languageId == null) {
			return StringPool.BLANK;
		}
		else {
			return _languageId;
		}
	}

	public void setLanguageId(String languageId) {
		_languageId = languageId;
	}

	@JSON
	public boolean getSynchronous() {
		return _synchronous;
	}

	public boolean isSynchronous() {
		return _synchronous;
	}

	public void setSynchronous(boolean synchronous) {
		_synchronous = synchronous;
	}

	@JSON
	public boolean getCreateOrder() {
		return _createOrder;
	}

	public boolean isCreateOrder() {
		return _createOrder;
	}

	public void setCreateOrder(boolean createOrder) {
		_createOrder = createOrder;
	}

	@JSON
	public int getTimeout() {
		return _timeout;
	}

	public void setTimeout(int timeout) {
		_timeout = timeout;
	}

	@JSON
	public int getMaxRegisterDaily() {
		return _maxRegisterDaily;
	}

	public void setMaxRegisterDaily(int maxRegisterDaily) {
		_maxRegisterDaily = maxRegisterDaily;
	}

	@JSON
	public int getDuplicateScan() {
		return _duplicateScan;
	}

	public void setDuplicateScan(int duplicateScan) {
		_duplicateScan = duplicateScan;
	}

	@JSON
	public boolean getCheckSpam() {
		return _checkSpam;
	}

	public boolean isCheckSpam() {
		return _checkSpam;
	}

	public void setCheckSpam(boolean checkSpam) {
		_checkSpam = checkSpam;
	}

	@JSON
	public int getFraudTimes() {
		return _fraudTimes;
	}

	public void setFraudTimes(int fraudTimes) {
		_fraudTimes = fraudTimes;
	}

	@JSON
	public int getFraudPeriod() {
		return _fraudPeriod;
	}

	public void setFraudPeriod(int fraudPeriod) {
		_fraudPeriod = fraudPeriod;
	}

	@JSON
	public String getFraudUnit() {
		if (_fraudUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _fraudUnit;
		}
	}

	public void setFraudUnit(String fraudUnit) {
		_fraudUnit = fraudUnit;
	}

	@JSON
	public String getRejectUnit() {
		if (_rejectUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _rejectUnit;
		}
	}

	public void setRejectUnit(String rejectUnit) {
		_rejectUnit = rejectUnit;
	}

	@JSON
	public int getRejectPeriod() {
		return _rejectPeriod;
	}

	public void setRejectPeriod(int rejectPeriod) {
		_rejectPeriod = rejectPeriod;
	}

	@JSON
	public boolean getBaseChargeEnable() {
		return _baseChargeEnable;
	}

	public boolean isBaseChargeEnable() {
		return _baseChargeEnable;
	}

	public void setBaseChargeEnable(boolean baseChargeEnable) {
		_baseChargeEnable = baseChargeEnable;
	}

	@JSON
	public double getChargingAmount() {
		return _chargingAmount;
	}

	public void setChargingAmount(double chargingAmount) {
		_chargingAmount = chargingAmount;
	}

	@JSON
	public boolean getNotifyOwner() {
		return _notifyOwner;
	}

	public boolean isNotifyOwner() {
		return _notifyOwner;
	}

	public void setNotifyOwner(boolean notifyOwner) {
		_notifyOwner = notifyOwner;
	}

	@JSON
	public boolean getNotifyDeliver() {
		return _notifyDeliver;
	}

	public boolean isNotifyDeliver() {
		return _notifyDeliver;
	}

	public void setNotifyDeliver(boolean notifyDeliver) {
		_notifyDeliver = notifyDeliver;
	}

	@JSON
	public boolean getSendAdvertising() {
		return _sendAdvertising;
	}

	public boolean isSendAdvertising() {
		return _sendAdvertising;
	}

	public void setSendAdvertising(boolean sendAdvertising) {
		_sendAdvertising = sendAdvertising;
	}

	@JSON
	public boolean getCheckPromotion() {
		return _checkPromotion;
	}

	public boolean isCheckPromotion() {
		return _checkPromotion;
	}

	public void setCheckPromotion(boolean checkPromotion) {
		_checkPromotion = checkPromotion;
	}

	@JSON
	public boolean getTopupEnable() {
		return _topupEnable;
	}

	public boolean isTopupEnable() {
		return _topupEnable;
	}

	public void setTopupEnable(boolean topupEnable) {
		_topupEnable = topupEnable;
	}

	@JSON
	public String getProperties() {
		if (_properties == null) {
			return StringPool.BLANK;
		}
		else {
			return _properties;
		}
	}

	public void setProperties(String properties) {
		_properties = properties;
	}

	@JSON
	public String getQueueName() {
		if (_queueName == null) {
			return StringPool.BLANK;
		}
		else {
			return _queueName;
		}
	}

	public void setQueueName(String queueName) {
		_queueName = queueName;
	}

	@JSON
	public String getProcessClass() {
		if (_processClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _processClass;
		}
	}

	public void setProcessClass(String processClass) {
		_processClass = processClass;
	}

	@JSON
	public String getProcessMethod() {
		if (_processMethod == null) {
			return StringPool.BLANK;
		}
		else {
			return _processMethod;
		}
	}

	public void setProcessMethod(String processMethod) {
		_processMethod = processMethod;
	}

	@JSON
	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	public Date getStartDate() {
		return _startDate;
	}

	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	public Date getExpirationDate() {
		return _expirationDate;
	}

	public void setExpirationDate(Date expirationDate) {
		_expirationDate = expirationDate;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ProductRoute.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProductRoute toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (ProductRoute)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		ProductRouteImpl productRouteImpl = new ProductRouteImpl();

		productRouteImpl.setRouteId(getRouteId());
		productRouteImpl.setGroupId(getGroupId());
		productRouteImpl.setCompanyId(getCompanyId());
		productRouteImpl.setUserId(getUserId());
		productRouteImpl.setCreateDate(getCreateDate());
		productRouteImpl.setModifiedDate(getModifiedDate());
		productRouteImpl.setChannel(getChannel());
		productRouteImpl.setServiceAddress(getServiceAddress());
		productRouteImpl.setKeyword(getKeyword());
		productRouteImpl.setOpenTime(getOpenTime());
		productRouteImpl.setClosedTime(getClosedTime());
		productRouteImpl.setCheckBalance(getCheckBalance());
		productRouteImpl.setSmsMinParams(getSmsMinParams());
		productRouteImpl.setSmsMaxParams(getSmsMaxParams());
		productRouteImpl.setActionType(getActionType());
		productRouteImpl.setProductId(getProductId());
		productRouteImpl.setCampaignId(getCampaignId());
		productRouteImpl.setLanguageId(getLanguageId());
		productRouteImpl.setSynchronous(getSynchronous());
		productRouteImpl.setCreateOrder(getCreateOrder());
		productRouteImpl.setTimeout(getTimeout());
		productRouteImpl.setMaxRegisterDaily(getMaxRegisterDaily());
		productRouteImpl.setDuplicateScan(getDuplicateScan());
		productRouteImpl.setCheckSpam(getCheckSpam());
		productRouteImpl.setFraudTimes(getFraudTimes());
		productRouteImpl.setFraudPeriod(getFraudPeriod());
		productRouteImpl.setFraudUnit(getFraudUnit());
		productRouteImpl.setRejectUnit(getRejectUnit());
		productRouteImpl.setRejectPeriod(getRejectPeriod());
		productRouteImpl.setBaseChargeEnable(getBaseChargeEnable());
		productRouteImpl.setChargingAmount(getChargingAmount());
		productRouteImpl.setNotifyOwner(getNotifyOwner());
		productRouteImpl.setNotifyDeliver(getNotifyDeliver());
		productRouteImpl.setSendAdvertising(getSendAdvertising());
		productRouteImpl.setCheckPromotion(getCheckPromotion());
		productRouteImpl.setTopupEnable(getTopupEnable());
		productRouteImpl.setProperties(getProperties());
		productRouteImpl.setQueueName(getQueueName());
		productRouteImpl.setProcessClass(getProcessClass());
		productRouteImpl.setProcessMethod(getProcessMethod());
		productRouteImpl.setStatus(getStatus());
		productRouteImpl.setStartDate(getStartDate());
		productRouteImpl.setExpirationDate(getExpirationDate());
		productRouteImpl.setDescription(getDescription());

		productRouteImpl.resetOriginalValues();

		return productRouteImpl;
	}

	public int compareTo(ProductRoute productRoute) {
		int value = 0;

		value = getChannel().compareTo(productRoute.getChannel());

		if (value != 0) {
			return value;
		}

		value = getServiceAddress().compareTo(productRoute.getServiceAddress());

		if (value != 0) {
			return value;
		}

		value = getKeyword().compareTo(productRoute.getKeyword());

		if (value != 0) {
			return value;
		}

		value = getOpenTime().compareTo(productRoute.getOpenTime());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ProductRoute productRoute = null;

		try {
			productRoute = (ProductRoute)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = productRoute.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ProductRouteModelImpl productRouteModelImpl = this;

		productRouteModelImpl._originalChannel = productRouteModelImpl._channel;

		productRouteModelImpl._originalServiceAddress = productRouteModelImpl._serviceAddress;

		productRouteModelImpl._originalKeyword = productRouteModelImpl._keyword;

		productRouteModelImpl._originalProductId = productRouteModelImpl._productId;

		productRouteModelImpl._setOriginalProductId = false;

		productRouteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProductRoute> toCacheModel() {
		ProductRouteCacheModel productRouteCacheModel = new ProductRouteCacheModel();

		productRouteCacheModel.routeId = getRouteId();

		productRouteCacheModel.groupId = getGroupId();

		productRouteCacheModel.companyId = getCompanyId();

		productRouteCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			productRouteCacheModel.createDate = createDate.getTime();
		}
		else {
			productRouteCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			productRouteCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			productRouteCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		productRouteCacheModel.channel = getChannel();

		String channel = productRouteCacheModel.channel;

		if ((channel != null) && (channel.length() == 0)) {
			productRouteCacheModel.channel = null;
		}

		productRouteCacheModel.serviceAddress = getServiceAddress();

		String serviceAddress = productRouteCacheModel.serviceAddress;

		if ((serviceAddress != null) && (serviceAddress.length() == 0)) {
			productRouteCacheModel.serviceAddress = null;
		}

		productRouteCacheModel.keyword = getKeyword();

		String keyword = productRouteCacheModel.keyword;

		if ((keyword != null) && (keyword.length() == 0)) {
			productRouteCacheModel.keyword = null;
		}

		productRouteCacheModel.openTime = getOpenTime();

		String openTime = productRouteCacheModel.openTime;

		if ((openTime != null) && (openTime.length() == 0)) {
			productRouteCacheModel.openTime = null;
		}

		productRouteCacheModel.closedTime = getClosedTime();

		String closedTime = productRouteCacheModel.closedTime;

		if ((closedTime != null) && (closedTime.length() == 0)) {
			productRouteCacheModel.closedTime = null;
		}

		productRouteCacheModel.checkBalance = getCheckBalance();

		productRouteCacheModel.smsMinParams = getSmsMinParams();

		productRouteCacheModel.smsMaxParams = getSmsMaxParams();

		productRouteCacheModel.actionType = getActionType();

		String actionType = productRouteCacheModel.actionType;

		if ((actionType != null) && (actionType.length() == 0)) {
			productRouteCacheModel.actionType = null;
		}

		productRouteCacheModel.productId = getProductId();

		productRouteCacheModel.campaignId = getCampaignId();

		productRouteCacheModel.languageId = getLanguageId();

		String languageId = productRouteCacheModel.languageId;

		if ((languageId != null) && (languageId.length() == 0)) {
			productRouteCacheModel.languageId = null;
		}

		productRouteCacheModel.synchronous = getSynchronous();

		productRouteCacheModel.createOrder = getCreateOrder();

		productRouteCacheModel.timeout = getTimeout();

		productRouteCacheModel.maxRegisterDaily = getMaxRegisterDaily();

		productRouteCacheModel.duplicateScan = getDuplicateScan();

		productRouteCacheModel.checkSpam = getCheckSpam();

		productRouteCacheModel.fraudTimes = getFraudTimes();

		productRouteCacheModel.fraudPeriod = getFraudPeriod();

		productRouteCacheModel.fraudUnit = getFraudUnit();

		String fraudUnit = productRouteCacheModel.fraudUnit;

		if ((fraudUnit != null) && (fraudUnit.length() == 0)) {
			productRouteCacheModel.fraudUnit = null;
		}

		productRouteCacheModel.rejectUnit = getRejectUnit();

		String rejectUnit = productRouteCacheModel.rejectUnit;

		if ((rejectUnit != null) && (rejectUnit.length() == 0)) {
			productRouteCacheModel.rejectUnit = null;
		}

		productRouteCacheModel.rejectPeriod = getRejectPeriod();

		productRouteCacheModel.baseChargeEnable = getBaseChargeEnable();

		productRouteCacheModel.chargingAmount = getChargingAmount();

		productRouteCacheModel.notifyOwner = getNotifyOwner();

		productRouteCacheModel.notifyDeliver = getNotifyDeliver();

		productRouteCacheModel.sendAdvertising = getSendAdvertising();

		productRouteCacheModel.checkPromotion = getCheckPromotion();

		productRouteCacheModel.topupEnable = getTopupEnable();

		productRouteCacheModel.properties = getProperties();

		String properties = productRouteCacheModel.properties;

		if ((properties != null) && (properties.length() == 0)) {
			productRouteCacheModel.properties = null;
		}

		productRouteCacheModel.queueName = getQueueName();

		String queueName = productRouteCacheModel.queueName;

		if ((queueName != null) && (queueName.length() == 0)) {
			productRouteCacheModel.queueName = null;
		}

		productRouteCacheModel.processClass = getProcessClass();

		String processClass = productRouteCacheModel.processClass;

		if ((processClass != null) && (processClass.length() == 0)) {
			productRouteCacheModel.processClass = null;
		}

		productRouteCacheModel.processMethod = getProcessMethod();

		String processMethod = productRouteCacheModel.processMethod;

		if ((processMethod != null) && (processMethod.length() == 0)) {
			productRouteCacheModel.processMethod = null;
		}

		productRouteCacheModel.status = getStatus();

		Date startDate = getStartDate();

		if (startDate != null) {
			productRouteCacheModel.startDate = startDate.getTime();
		}
		else {
			productRouteCacheModel.startDate = Long.MIN_VALUE;
		}

		Date expirationDate = getExpirationDate();

		if (expirationDate != null) {
			productRouteCacheModel.expirationDate = expirationDate.getTime();
		}
		else {
			productRouteCacheModel.expirationDate = Long.MIN_VALUE;
		}

		productRouteCacheModel.description = getDescription();

		String description = productRouteCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			productRouteCacheModel.description = null;
		}

		return productRouteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(89);

		sb.append("{routeId=");
		sb.append(getRouteId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", channel=");
		sb.append(getChannel());
		sb.append(", serviceAddress=");
		sb.append(getServiceAddress());
		sb.append(", keyword=");
		sb.append(getKeyword());
		sb.append(", openTime=");
		sb.append(getOpenTime());
		sb.append(", closedTime=");
		sb.append(getClosedTime());
		sb.append(", checkBalance=");
		sb.append(getCheckBalance());
		sb.append(", smsMinParams=");
		sb.append(getSmsMinParams());
		sb.append(", smsMaxParams=");
		sb.append(getSmsMaxParams());
		sb.append(", actionType=");
		sb.append(getActionType());
		sb.append(", productId=");
		sb.append(getProductId());
		sb.append(", campaignId=");
		sb.append(getCampaignId());
		sb.append(", languageId=");
		sb.append(getLanguageId());
		sb.append(", synchronous=");
		sb.append(getSynchronous());
		sb.append(", createOrder=");
		sb.append(getCreateOrder());
		sb.append(", timeout=");
		sb.append(getTimeout());
		sb.append(", maxRegisterDaily=");
		sb.append(getMaxRegisterDaily());
		sb.append(", duplicateScan=");
		sb.append(getDuplicateScan());
		sb.append(", checkSpam=");
		sb.append(getCheckSpam());
		sb.append(", fraudTimes=");
		sb.append(getFraudTimes());
		sb.append(", fraudPeriod=");
		sb.append(getFraudPeriod());
		sb.append(", fraudUnit=");
		sb.append(getFraudUnit());
		sb.append(", rejectUnit=");
		sb.append(getRejectUnit());
		sb.append(", rejectPeriod=");
		sb.append(getRejectPeriod());
		sb.append(", baseChargeEnable=");
		sb.append(getBaseChargeEnable());
		sb.append(", chargingAmount=");
		sb.append(getChargingAmount());
		sb.append(", notifyOwner=");
		sb.append(getNotifyOwner());
		sb.append(", notifyDeliver=");
		sb.append(getNotifyDeliver());
		sb.append(", sendAdvertising=");
		sb.append(getSendAdvertising());
		sb.append(", checkPromotion=");
		sb.append(getCheckPromotion());
		sb.append(", topupEnable=");
		sb.append(getTopupEnable());
		sb.append(", properties=");
		sb.append(getProperties());
		sb.append(", queueName=");
		sb.append(getQueueName());
		sb.append(", processClass=");
		sb.append(getProcessClass());
		sb.append(", processMethod=");
		sb.append(getProcessMethod());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", expirationDate=");
		sb.append(getExpirationDate());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(136);

		sb.append("<model><model-name>");
		sb.append("com.cmc.gateway.domain.model.ProductRoute");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>routeId</column-name><column-value><![CDATA[");
		sb.append(getRouteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>channel</column-name><column-value><![CDATA[");
		sb.append(getChannel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceAddress</column-name><column-value><![CDATA[");
		sb.append(getServiceAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>keyword</column-name><column-value><![CDATA[");
		sb.append(getKeyword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>openTime</column-name><column-value><![CDATA[");
		sb.append(getOpenTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>closedTime</column-name><column-value><![CDATA[");
		sb.append(getClosedTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkBalance</column-name><column-value><![CDATA[");
		sb.append(getCheckBalance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smsMinParams</column-name><column-value><![CDATA[");
		sb.append(getSmsMinParams());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smsMaxParams</column-name><column-value><![CDATA[");
		sb.append(getSmsMaxParams());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionType</column-name><column-value><![CDATA[");
		sb.append(getActionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productId</column-name><column-value><![CDATA[");
		sb.append(getProductId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>campaignId</column-name><column-value><![CDATA[");
		sb.append(getCampaignId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>languageId</column-name><column-value><![CDATA[");
		sb.append(getLanguageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>synchronous</column-name><column-value><![CDATA[");
		sb.append(getSynchronous());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createOrder</column-name><column-value><![CDATA[");
		sb.append(getCreateOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeout</column-name><column-value><![CDATA[");
		sb.append(getTimeout());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxRegisterDaily</column-name><column-value><![CDATA[");
		sb.append(getMaxRegisterDaily());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>duplicateScan</column-name><column-value><![CDATA[");
		sb.append(getDuplicateScan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkSpam</column-name><column-value><![CDATA[");
		sb.append(getCheckSpam());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fraudTimes</column-name><column-value><![CDATA[");
		sb.append(getFraudTimes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fraudPeriod</column-name><column-value><![CDATA[");
		sb.append(getFraudPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fraudUnit</column-name><column-value><![CDATA[");
		sb.append(getFraudUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rejectUnit</column-name><column-value><![CDATA[");
		sb.append(getRejectUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rejectPeriod</column-name><column-value><![CDATA[");
		sb.append(getRejectPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>baseChargeEnable</column-name><column-value><![CDATA[");
		sb.append(getBaseChargeEnable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chargingAmount</column-name><column-value><![CDATA[");
		sb.append(getChargingAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notifyOwner</column-name><column-value><![CDATA[");
		sb.append(getNotifyOwner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notifyDeliver</column-name><column-value><![CDATA[");
		sb.append(getNotifyDeliver());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sendAdvertising</column-name><column-value><![CDATA[");
		sb.append(getSendAdvertising());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkPromotion</column-name><column-value><![CDATA[");
		sb.append(getCheckPromotion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>topupEnable</column-name><column-value><![CDATA[");
		sb.append(getTopupEnable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>properties</column-name><column-value><![CDATA[");
		sb.append(getProperties());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>queueName</column-name><column-value><![CDATA[");
		sb.append(getQueueName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processClass</column-name><column-value><![CDATA[");
		sb.append(getProcessClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processMethod</column-name><column-value><![CDATA[");
		sb.append(getProcessMethod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expirationDate</column-name><column-value><![CDATA[");
		sb.append(getExpirationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ProductRoute.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			ProductRoute.class
		};
	private long _routeId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private String _channel;
	private String _originalChannel;
	private String _serviceAddress;
	private String _originalServiceAddress;
	private String _keyword;
	private String _originalKeyword;
	private String _openTime;
	private String _closedTime;
	private boolean _checkBalance;
	private int _smsMinParams;
	private int _smsMaxParams;
	private String _actionType;
	private long _productId;
	private long _originalProductId;
	private boolean _setOriginalProductId;
	private long _campaignId;
	private String _languageId;
	private boolean _synchronous;
	private boolean _createOrder;
	private int _timeout;
	private int _maxRegisterDaily;
	private int _duplicateScan;
	private boolean _checkSpam;
	private int _fraudTimes;
	private int _fraudPeriod;
	private String _fraudUnit;
	private String _rejectUnit;
	private int _rejectPeriod;
	private boolean _baseChargeEnable;
	private double _chargingAmount;
	private boolean _notifyOwner;
	private boolean _notifyDeliver;
	private boolean _sendAdvertising;
	private boolean _checkPromotion;
	private boolean _topupEnable;
	private String _properties;
	private String _queueName;
	private String _processClass;
	private String _processMethod;
	private int _status;
	private Date _startDate;
	private Date _expirationDate;
	private String _description;
	private long _columnBitmask;
	private ProductRoute _escapedModelProxy;
}