/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cmc.gateway.domain.model.impl;

import com.cmc.gateway.domain.model.CommandEntry;
import com.cmc.gateway.domain.model.CommandEntryModel;
import com.cmc.gateway.domain.model.CommandEntrySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CommandEntry service. Represents a row in the &quot;GW_CommandEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cmc.gateway.domain.model.CommandEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommandEntryImpl}.
 * </p>
 *
 * @author Richard Nguyen
 * @see CommandEntryImpl
 * @see com.cmc.gateway.domain.model.CommandEntry
 * @see com.cmc.gateway.domain.model.CommandEntryModel
 * @generated
 */
@JSON(strict = true)
public class CommandEntryModelImpl extends BaseModelImpl<CommandEntry>
	implements CommandEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a command entry model instance should use the {@link com.cmc.gateway.domain.model.CommandEntry} interface instead.
	 */
	public static final String TABLE_NAME = "GW_CommandEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "commandId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "provisioningType", Types.VARCHAR },
			{ "CODE", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "priority", Types.INTEGER },
			{ "timeout", Types.INTEGER },
			{ "retryEnable", Types.BOOLEAN },
			{ "maxRetry", Types.INTEGER },
			{ "logEnable", Types.BOOLEAN },
			{ "properties", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GW_CommandEntry (commandId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,provisioningType VARCHAR(75) null,CODE VARCHAR(75) null,title VARCHAR(75) null,priority INTEGER,timeout INTEGER,retryEnable BOOLEAN,maxRetry INTEGER,logEnable BOOLEAN,properties STRING null,status INTEGER,description STRING null)";
	public static final String TABLE_SQL_DROP = "drop table GW_CommandEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY commandEntry.code ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GW_CommandEntry.CODE ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cmc.gateway.domain.model.CommandEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cmc.gateway.domain.model.CommandEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cmc.gateway.domain.model.CommandEntry"),
			true);
	public static long CODE_COLUMN_BITMASK = 1L;
	public static long PROVISIONINGTYPE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CommandEntry toModel(CommandEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CommandEntry model = new CommandEntryImpl();

		model.setCommandId(soapModel.getCommandId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setProvisioningType(soapModel.getProvisioningType());
		model.setCode(soapModel.getCode());
		model.setTitle(soapModel.getTitle());
		model.setPriority(soapModel.getPriority());
		model.setTimeout(soapModel.getTimeout());
		model.setRetryEnable(soapModel.getRetryEnable());
		model.setMaxRetry(soapModel.getMaxRetry());
		model.setLogEnable(soapModel.getLogEnable());
		model.setProperties(soapModel.getProperties());
		model.setStatus(soapModel.getStatus());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CommandEntry> toModels(CommandEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CommandEntry> models = new ArrayList<CommandEntry>(soapModels.length);

		for (CommandEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cmc.gateway.domain.model.CommandEntry"));

	public CommandEntryModelImpl() {
	}

	public long getPrimaryKey() {
		return _commandId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCommandId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_commandId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return CommandEntry.class;
	}

	public String getModelClassName() {
		return CommandEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("commandId", getCommandId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("provisioningType", getProvisioningType());
		attributes.put("code", getCode());
		attributes.put("title", getTitle());
		attributes.put("priority", getPriority());
		attributes.put("timeout", getTimeout());
		attributes.put("retryEnable", getRetryEnable());
		attributes.put("maxRetry", getMaxRetry());
		attributes.put("logEnable", getLogEnable());
		attributes.put("properties", getProperties());
		attributes.put("status", getStatus());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long commandId = (Long)attributes.get("commandId");

		if (commandId != null) {
			setCommandId(commandId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String provisioningType = (String)attributes.get("provisioningType");

		if (provisioningType != null) {
			setProvisioningType(provisioningType);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		Integer priority = (Integer)attributes.get("priority");

		if (priority != null) {
			setPriority(priority);
		}

		Integer timeout = (Integer)attributes.get("timeout");

		if (timeout != null) {
			setTimeout(timeout);
		}

		Boolean retryEnable = (Boolean)attributes.get("retryEnable");

		if (retryEnable != null) {
			setRetryEnable(retryEnable);
		}

		Integer maxRetry = (Integer)attributes.get("maxRetry");

		if (maxRetry != null) {
			setMaxRetry(maxRetry);
		}

		Boolean logEnable = (Boolean)attributes.get("logEnable");

		if (logEnable != null) {
			setLogEnable(logEnable);
		}

		String properties = (String)attributes.get("properties");

		if (properties != null) {
			setProperties(properties);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	public long getCommandId() {
		return _commandId;
	}

	public void setCommandId(long commandId) {
		_commandId = commandId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getProvisioningType() {
		if (_provisioningType == null) {
			return StringPool.BLANK;
		}
		else {
			return _provisioningType;
		}
	}

	public void setProvisioningType(String provisioningType) {
		_columnBitmask |= PROVISIONINGTYPE_COLUMN_BITMASK;

		if (_originalProvisioningType == null) {
			_originalProvisioningType = _provisioningType;
		}

		_provisioningType = provisioningType;
	}

	public String getOriginalProvisioningType() {
		return GetterUtil.getString(_originalProvisioningType);
	}

	@JSON
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	public void setCode(String code) {
		_columnBitmask = -1L;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@JSON
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	public int getPriority() {
		return _priority;
	}

	public void setPriority(int priority) {
		_priority = priority;
	}

	@JSON
	public int getTimeout() {
		return _timeout;
	}

	public void setTimeout(int timeout) {
		_timeout = timeout;
	}

	@JSON
	public boolean getRetryEnable() {
		return _retryEnable;
	}

	public boolean isRetryEnable() {
		return _retryEnable;
	}

	public void setRetryEnable(boolean retryEnable) {
		_retryEnable = retryEnable;
	}

	@JSON
	public int getMaxRetry() {
		return _maxRetry;
	}

	public void setMaxRetry(int maxRetry) {
		_maxRetry = maxRetry;
	}

	@JSON
	public boolean getLogEnable() {
		return _logEnable;
	}

	public boolean isLogEnable() {
		return _logEnable;
	}

	public void setLogEnable(boolean logEnable) {
		_logEnable = logEnable;
	}

	@JSON
	public String getProperties() {
		if (_properties == null) {
			return StringPool.BLANK;
		}
		else {
			return _properties;
		}
	}

	public void setProperties(String properties) {
		_properties = properties;
	}

	@JSON
	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CommandEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CommandEntry toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (CommandEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		CommandEntryImpl commandEntryImpl = new CommandEntryImpl();

		commandEntryImpl.setCommandId(getCommandId());
		commandEntryImpl.setGroupId(getGroupId());
		commandEntryImpl.setCompanyId(getCompanyId());
		commandEntryImpl.setUserId(getUserId());
		commandEntryImpl.setCreateDate(getCreateDate());
		commandEntryImpl.setModifiedDate(getModifiedDate());
		commandEntryImpl.setProvisioningType(getProvisioningType());
		commandEntryImpl.setCode(getCode());
		commandEntryImpl.setTitle(getTitle());
		commandEntryImpl.setPriority(getPriority());
		commandEntryImpl.setTimeout(getTimeout());
		commandEntryImpl.setRetryEnable(getRetryEnable());
		commandEntryImpl.setMaxRetry(getMaxRetry());
		commandEntryImpl.setLogEnable(getLogEnable());
		commandEntryImpl.setProperties(getProperties());
		commandEntryImpl.setStatus(getStatus());
		commandEntryImpl.setDescription(getDescription());

		commandEntryImpl.resetOriginalValues();

		return commandEntryImpl;
	}

	public int compareTo(CommandEntry commandEntry) {
		int value = 0;

		value = getCode().compareTo(commandEntry.getCode());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		CommandEntry commandEntry = null;

		try {
			commandEntry = (CommandEntry)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = commandEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CommandEntryModelImpl commandEntryModelImpl = this;

		commandEntryModelImpl._originalProvisioningType = commandEntryModelImpl._provisioningType;

		commandEntryModelImpl._originalCode = commandEntryModelImpl._code;

		commandEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CommandEntry> toCacheModel() {
		CommandEntryCacheModel commandEntryCacheModel = new CommandEntryCacheModel();

		commandEntryCacheModel.commandId = getCommandId();

		commandEntryCacheModel.groupId = getGroupId();

		commandEntryCacheModel.companyId = getCompanyId();

		commandEntryCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			commandEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			commandEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			commandEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			commandEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		commandEntryCacheModel.provisioningType = getProvisioningType();

		String provisioningType = commandEntryCacheModel.provisioningType;

		if ((provisioningType != null) && (provisioningType.length() == 0)) {
			commandEntryCacheModel.provisioningType = null;
		}

		commandEntryCacheModel.code = getCode();

		String code = commandEntryCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			commandEntryCacheModel.code = null;
		}

		commandEntryCacheModel.title = getTitle();

		String title = commandEntryCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			commandEntryCacheModel.title = null;
		}

		commandEntryCacheModel.priority = getPriority();

		commandEntryCacheModel.timeout = getTimeout();

		commandEntryCacheModel.retryEnable = getRetryEnable();

		commandEntryCacheModel.maxRetry = getMaxRetry();

		commandEntryCacheModel.logEnable = getLogEnable();

		commandEntryCacheModel.properties = getProperties();

		String properties = commandEntryCacheModel.properties;

		if ((properties != null) && (properties.length() == 0)) {
			commandEntryCacheModel.properties = null;
		}

		commandEntryCacheModel.status = getStatus();

		commandEntryCacheModel.description = getDescription();

		String description = commandEntryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			commandEntryCacheModel.description = null;
		}

		return commandEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{commandId=");
		sb.append(getCommandId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", provisioningType=");
		sb.append(getProvisioningType());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append(", timeout=");
		sb.append(getTimeout());
		sb.append(", retryEnable=");
		sb.append(getRetryEnable());
		sb.append(", maxRetry=");
		sb.append(getMaxRetry());
		sb.append(", logEnable=");
		sb.append(getLogEnable());
		sb.append(", properties=");
		sb.append(getProperties());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.cmc.gateway.domain.model.CommandEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>commandId</column-name><column-value><![CDATA[");
		sb.append(getCommandId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>provisioningType</column-name><column-value><![CDATA[");
		sb.append(getProvisioningType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeout</column-name><column-value><![CDATA[");
		sb.append(getTimeout());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>retryEnable</column-name><column-value><![CDATA[");
		sb.append(getRetryEnable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxRetry</column-name><column-value><![CDATA[");
		sb.append(getMaxRetry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logEnable</column-name><column-value><![CDATA[");
		sb.append(getLogEnable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>properties</column-name><column-value><![CDATA[");
		sb.append(getProperties());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CommandEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			CommandEntry.class
		};
	private long _commandId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private String _provisioningType;
	private String _originalProvisioningType;
	private String _code;
	private String _originalCode;
	private String _title;
	private int _priority;
	private int _timeout;
	private boolean _retryEnable;
	private int _maxRetry;
	private boolean _logEnable;
	private String _properties;
	private int _status;
	private String _description;
	private long _columnBitmask;
	private CommandEntry _escapedModelProxy;
}