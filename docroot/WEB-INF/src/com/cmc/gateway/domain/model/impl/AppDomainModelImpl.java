/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cmc.gateway.domain.model.impl;

import com.cmc.gateway.domain.model.AppDomain;
import com.cmc.gateway.domain.model.AppDomainModel;
import com.cmc.gateway.domain.model.AppDomainSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AppDomain service. Represents a row in the &quot;GW_AppDomain&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cmc.gateway.domain.model.AppDomainModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AppDomainImpl}.
 * </p>
 *
 * @author Richard Nguyen
 * @see AppDomainImpl
 * @see com.cmc.gateway.domain.model.AppDomain
 * @see com.cmc.gateway.domain.model.AppDomainModel
 * @generated
 */
@JSON(strict = true)
public class AppDomainModelImpl extends BaseModelImpl<AppDomain>
	implements AppDomainModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a app domain model instance should use the {@link com.cmc.gateway.domain.model.AppDomain} interface instead.
	 */
	public static final String TABLE_NAME = "GW_AppDomain";
	public static final Object[][] TABLE_COLUMNS = {
			{ "domainId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "TYPE", Types.VARCHAR },
			{ "CODE", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "value", Types.VARCHAR },
			{ "defaultValue", Types.BOOLEAN },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GW_AppDomain (domainId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,TYPE VARCHAR(75) null,CODE VARCHAR(75) null,title VARCHAR(75) null,value VARCHAR(75) null,defaultValue BOOLEAN,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table GW_AppDomain";
	public static final String ORDER_BY_JPQL = " ORDER BY appDomain.type ASC, appDomain.code ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GW_AppDomain.TYPE ASC, GW_AppDomain.CODE ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cmc.gateway.domain.model.AppDomain"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cmc.gateway.domain.model.AppDomain"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cmc.gateway.domain.model.AppDomain"),
			true);
	public static long CODE_COLUMN_BITMASK = 1L;
	public static long TYPE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AppDomain toModel(AppDomainSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AppDomain model = new AppDomainImpl();

		model.setDomainId(soapModel.getDomainId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setType(soapModel.getType());
		model.setCode(soapModel.getCode());
		model.setTitle(soapModel.getTitle());
		model.setValue(soapModel.getValue());
		model.setDefaultValue(soapModel.getDefaultValue());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AppDomain> toModels(AppDomainSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AppDomain> models = new ArrayList<AppDomain>(soapModels.length);

		for (AppDomainSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cmc.gateway.domain.model.AppDomain"));

	public AppDomainModelImpl() {
	}

	public long getPrimaryKey() {
		return _domainId;
	}

	public void setPrimaryKey(long primaryKey) {
		setDomainId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_domainId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return AppDomain.class;
	}

	public String getModelClassName() {
		return AppDomain.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("domainId", getDomainId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("type", getType());
		attributes.put("code", getCode());
		attributes.put("title", getTitle());
		attributes.put("value", getValue());
		attributes.put("defaultValue", getDefaultValue());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long domainId = (Long)attributes.get("domainId");

		if (domainId != null) {
			setDomainId(domainId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String value = (String)attributes.get("value");

		if (value != null) {
			setValue(value);
		}

		Boolean defaultValue = (Boolean)attributes.get("defaultValue");

		if (defaultValue != null) {
			setDefaultValue(defaultValue);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	public long getDomainId() {
		return _domainId;
	}

	public void setDomainId(long domainId) {
		_domainId = domainId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	public void setType(String type) {
		_columnBitmask = -1L;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	@JSON
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	public void setCode(String code) {
		_columnBitmask = -1L;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@JSON
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	public String getValue() {
		if (_value == null) {
			return StringPool.BLANK;
		}
		else {
			return _value;
		}
	}

	public void setValue(String value) {
		_value = value;
	}

	@JSON
	public boolean getDefaultValue() {
		return _defaultValue;
	}

	public boolean isDefaultValue() {
		return _defaultValue;
	}

	public void setDefaultValue(boolean defaultValue) {
		_defaultValue = defaultValue;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			AppDomain.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AppDomain toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (AppDomain)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		AppDomainImpl appDomainImpl = new AppDomainImpl();

		appDomainImpl.setDomainId(getDomainId());
		appDomainImpl.setGroupId(getGroupId());
		appDomainImpl.setCompanyId(getCompanyId());
		appDomainImpl.setUserId(getUserId());
		appDomainImpl.setCreateDate(getCreateDate());
		appDomainImpl.setModifiedDate(getModifiedDate());
		appDomainImpl.setType(getType());
		appDomainImpl.setCode(getCode());
		appDomainImpl.setTitle(getTitle());
		appDomainImpl.setValue(getValue());
		appDomainImpl.setDefaultValue(getDefaultValue());
		appDomainImpl.setDescription(getDescription());

		appDomainImpl.resetOriginalValues();

		return appDomainImpl;
	}

	public int compareTo(AppDomain appDomain) {
		int value = 0;

		value = getType().compareTo(appDomain.getType());

		if (value != 0) {
			return value;
		}

		value = getCode().compareTo(appDomain.getCode());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		AppDomain appDomain = null;

		try {
			appDomain = (AppDomain)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = appDomain.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AppDomainModelImpl appDomainModelImpl = this;

		appDomainModelImpl._originalType = appDomainModelImpl._type;

		appDomainModelImpl._originalCode = appDomainModelImpl._code;

		appDomainModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AppDomain> toCacheModel() {
		AppDomainCacheModel appDomainCacheModel = new AppDomainCacheModel();

		appDomainCacheModel.domainId = getDomainId();

		appDomainCacheModel.groupId = getGroupId();

		appDomainCacheModel.companyId = getCompanyId();

		appDomainCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			appDomainCacheModel.createDate = createDate.getTime();
		}
		else {
			appDomainCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			appDomainCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			appDomainCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		appDomainCacheModel.type = getType();

		String type = appDomainCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			appDomainCacheModel.type = null;
		}

		appDomainCacheModel.code = getCode();

		String code = appDomainCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			appDomainCacheModel.code = null;
		}

		appDomainCacheModel.title = getTitle();

		String title = appDomainCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			appDomainCacheModel.title = null;
		}

		appDomainCacheModel.value = getValue();

		String value = appDomainCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			appDomainCacheModel.value = null;
		}

		appDomainCacheModel.defaultValue = getDefaultValue();

		appDomainCacheModel.description = getDescription();

		String description = appDomainCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			appDomainCacheModel.description = null;
		}

		return appDomainCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{domainId=");
		sb.append(getDomainId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", value=");
		sb.append(getValue());
		sb.append(", defaultValue=");
		sb.append(getDefaultValue());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.cmc.gateway.domain.model.AppDomain");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>domainId</column-name><column-value><![CDATA[");
		sb.append(getDomainId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defaultValue</column-name><column-value><![CDATA[");
		sb.append(getDefaultValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AppDomain.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			AppDomain.class
		};
	private long _domainId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private String _type;
	private String _originalType;
	private String _code;
	private String _originalCode;
	private String _title;
	private String _value;
	private boolean _defaultValue;
	private String _description;
	private long _columnBitmask;
	private AppDomain _escapedModelProxy;
}